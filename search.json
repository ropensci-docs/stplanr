[{"path":"https://docs.ropensci.org/stplanr/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/merging-route-networks.html","id":"target-network-preprocessing","dir":"Articles","previous_headings":"","what":"Target network preprocessing","title":"Merging route networks","text":"pre-processed input simple geometry make even simpler shown . initial merged result follows (original data left) Speed-results transforming projected coordinate system: Let’s check results: can reduce minimum segment length ensure fewer NA values outputs: shown results, sideroad values unrealistically high values:  Let’s see results : good news: number NAs 21 compared previous 100+. Bad news: sideroads assigned values main roads. can fix max_angle_diff argument: shown results, sideroad values fixed:  Let’s see results : also works charaster strings: Now let’s testing 3km dataset Read columns rnet_y assign functions Read 3km_exmaple_merged github","code":"# tmap_mode(\"view\") # nrow(rnet_x) # summary(sf::st_length(rnet_x)) plot(sf::st_geometry(rnet_x)) rnet_x = rnet_subset(rnet_x, rnet_y, dist = 20) # nrow(rnet_x) # plot(sf::st_geometry(rnet_x)) rnet_x = rnet_subset(rnet_x, rnet_y, dist = 20, min_length = 5) # summary(sf::st_length(rnet_x)) # nrow(rnet_x) # plot(sf::st_geometry(rnet_x)) rnet_x = rnet_subset(rnet_x, rnet_y, dist = 20, rm_disconnected = TRUE) # nrow(rnet_x) plot(sf::st_geometry(rnet_x)) funs = list(value = sum, Quietness = mean) brks = c(0, 100, 500, 1000, 5000) system.time({   rnet_merged = rnet_merge(rnet_x, rnet_y, dist = 10, segment_length = 20, funs = funs) }) m1 = tm_shape(rnet_y) + tm_lines(\"value\", palette = \"viridis\", lwd = 5, breaks = brks)  +   tm_scale_bar() m2 = tm_shape(rnet_merged) + tm_lines(\"value\", palette = \"viridis\", lwd = 5, breaks = brks) tmap_arrange(m1, m2, sync = TRUE, nrow = 1) rnet_x = sf::st_transform(rnet_x, 27700) rnet_y = sf::st_transform(rnet_y, 27700) rnet_y_segmented = line_segment(rnet_y, segment_length = 20, use_rsgeo = TRUE) system.time({   rnet_merged2 = rnet_merge(rnet_x, rnet_y, dist = 10, segment_length = 20, funs = funs) }) names(rnet_merged) summary(rnet_merged$value) summary(rnet_y$value) sum(rnet_merged$value * sf::st_length(rnet_merged), na.rm = TRUE) sum(rnet_y$value * sf::st_length(rnet_y), na.rm = TRUE) rnet_merged = rnet_merge(rnet_x, rnet_y, dist = 20, segment_length = 10, funs = funs) m1 = tm_shape(rnet_y) + tm_lines(\"value\", palette = \"viridis\", lwd = 5, breaks = brks) m2 = tm_shape(rnet_merged) + tm_lines(\"value\", palette = \"viridis\", lwd = 5, breaks = brks) tmap_arrange(m1, m2, sync = TRUE, nrow = 1) summary(rnet_merged$value) summary(rnet_y$value) sum(rnet_merged$value * sf::st_length(rnet_merged), na.rm = TRUE) sum(rnet_y$value * sf::st_length(rnet_y), na.rm = TRUE) rnet_merged = rnet_merge(rnet_x, rnet_y, dist = 20, segment_length = 10, funs = funs, max_angle_diff = 20) m1 = tm_shape(rnet_y) + tm_lines(\"value\", palette = \"viridis\", lwd = 5, breaks = brks) m2 = tm_shape(rnet_merged) + tm_lines(\"value\", palette = \"viridis\", lwd = 5, breaks = brks) tmap_arrange(m1, m2, sync = TRUE, nrow = 1) summary(rnet_merged$value) summary(rnet_y$value) sum(rnet_merged$value * sf::st_length(rnet_merged), na.rm = TRUE) sum(rnet_y$value * sf::st_length(rnet_y), na.rm = TRUE) rnet_y$char = paste0(\"road\", sample(1:3, nrow(rnet_y), replace = TRUE)) most_common = function(x) {   ux = unique(x)   ux[which.max(tabulate(match(x, ux)))] } funs = list(char = most_common) system.time({   rnet_merged = rnet_merge(rnet_x, rnet_y, dist = 10, segment_length = 20, funs = funs) }) plot(rnet_y[\"char\"]) plot(rnet_merged[\"char\"]) rnet_x = sf::read_sf(\"https://github.com/nptscot/networkmerge/releases/download/v0.1/os_3km.geojson\") rnet_y = sf::read_sf(\"https://github.com/nptscot/npt/releases/download/rnet_3km_buffer/rnet_3km_buffer.geojson\") # Extract column names from the rnet_x data frame name_list <- names(rnet_y) name_list # Initialize an empty list funs <- list()  # Loop through each name and assign it a function based on specific conditions for (name in name_list) {   if (name == \"geometry\") {     next  # Skip the current iteration   } else if (name %in% c(\"Gradient\", \"Quietness\")) {     funs[[name]] <- mean   } else {     funs[[name]] <- sum   } } brks = c(0, 100, 500, 1000, 5000,10000) colors <- c(\"green\", \"yellow\", \"blue\", \"purple\", \"red\") rnet_merged = rnet_merge(rnet_x, rnet_y, dist = 20, segment_length = 10, funs = funs, max_angle_diff = 20) # st_write(rnet_merged, \"data-raw/3km_exmaple_merged.geojson\", driver = \"GeoJSON\") rnet_merged <- st_make_valid(rnet_merged) m1 = tm_shape(rnet_y) + tm_lines(\"all_fastest_bicycle\", palette = \"viridis\", lwd = 5, breaks = brks) m2 = tm_shape(rnet_merged) + tm_lines(\"all_fastest_bicycle\", palette = \"viridis\", lwd = 5, breaks = brks) tmap_arrange(m1, m2, sync = TRUE, nrow = 1) exmaple_3km = sf::read_sf(\"https://github.com/nptscot/networkmerge/releases/download/v0.1/3km_exmaple_merged.geojson\") names(rnet_y)  summary(rnet_y$all_fastest_bicycle) summary(exmaple_3km$all_fastest_bicycle) sum(exmaple_3km$all_fastest_bicycle * sf::st_length(exmaple_3km), na.rm = TRUE) sum(rnet_y$all_fastest_bicycle * sf::st_length(rnet_y), na.rm = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"introduction-what-is-od-data","dir":"Articles","previous_headings":"","what":"Introduction: what is OD data?","title":"Origin-destination data with stplanr","text":"name suggests, origin-destination (OD) data represents movement geographic space, origin (O) destination (D). Sometimes also called ‘flow data’, OD datasets contain details trips two geographic points , commonly, zones (often represented zone centroid). OD datasets refer start end locations ‘ID’ columns containing character strings zone1. IDs refer geographic feature separate geographic dataset. Origin destination locations sometimes represented geographic coordinates. OD datasets typically contain multiple non geographic attributes. usually include, minimum, number trips take place origin destination given time period (e.g. typical work day). Additional attributes can include breakdown mode(s) transport used trips. Usually single mode captured (trips made combination cycle-train-walk modes often counted ‘train’ trips). Additional disaggregations overall counts may include trip counts different time periods. Many OD datasets omit information. one time period, resides metadata whole data set. rarely information path taken start end points. typically job analyst use routing service (OSRM, Google Directions API, CycleStreets.net OpenRouteService) assignment model (contained proprietary software SATURN Visum) identify likely routes reference shortest path algorithms generalised cost minimisation algorithms (account monetary plus time quality ‘costs’).","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"the-importance-of-od-data","dir":"Articles","previous_headings":"","what":"The importance of OD data","title":"Origin-destination data with stplanr","text":"Despite rather dull name, OD datasets vital part modern world: underpin analysis models influence current future transport systems. Historically, models, OD datasets drove , used plan car-dominated cities (Boyce Williams 2015). Now growing evidence negative impacts car domination, however, strong argument transport models re-purposed. Origin-destination data can part solution. health perspective transport planning, supported OD data analysed primarily using proprietary software opaque methods, failed: roads now largest cause death young people worldwide, killing 1 million people year (World Health Organization 2018). Even ignoring problems air pollution, obesity climate change, clear current transport systems unsustainable. reasons transport data analysis software important (Lovelace Ellison 2018). purpose vignette introduce OD data, important component many transport planning models, examples based data functions stplanr package. aim enable use OD data inform sustainable transport plans, example identifying ‘desire lines’ along policies cause modal switch away cars towards lower energy modes walking, cycling, public transport.","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"an-example-od-dataset","dir":"Articles","previous_headings":"","what":"An example OD dataset","title":"Origin-destination data with stplanr","text":"OD data can accessed range sources (see code downloads many thousands OD pairs later vignette). ‘data carpentry’ may needed OD data ready analysis. vignette cover cleaning OD data: assume know R come ‘tidy’ data (Wickham 2014), row represents travel origin destination (typically zones represented zone IDs), column represents attribute number trips vehichle counts mode straight line distance.1 simple terms OD data looks like : Like data, object od, created preceding code chunk, comes specific context: 2011 UK Census questions: main job, address workplace? Work mainly home Underground, metro, light rail, tram Train … object od data frame containing aggregated answers questions (see ?pct::get_od() details). implicitly geographic: first two columns refer geographic entities contain coordinates (OD coordinates covered ). columns contain attributes associated OD pair, typically counting many people travel mode transport. OD data can represented number ways, outlined next sections.","code":"library(stplanr) library(dplyr) od <- stplanr::od_data_sample %>%   select(-matches(\"rail|name|moto|car|tax|home|la_\")) %>%   top_n(n = 14, wt = all) class(od) od"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"origin-destination-pairs-long-form","dir":"Articles","previous_headings":"","what":"Origin-destination pairs (long form)","title":"Origin-destination data with stplanr","text":"useful way representing OD data ‘long’ data frame format described . increasingly format used official statistical agencies, including UK’s Office National Statistics (ONS), provide origin destination data .csv file. Typically, first column zone code origin second column zone code destination, case object od. Subsequent columns contain attributes , meaning trips modes, illustrated (see matrix representation subset data next section): geo_code1 refers origin, geo_code2 refers destination. Additional columns can represent addition attributes, number trips time, mode travel, type person, trip purpose. od dataset contains column names representing mode travel (train, bus, bicycle etc), can seen names(od[-(1:2)]). ‘mode’ columns contain integers example data, contain characters, dates data types, taking advantage flexibility data frames.","code":"od[1:3]"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"origin-destination-matrices","dir":"Articles","previous_headings":"","what":"Origin destination matrices","title":"Origin-destination data with stplanr","text":"‘OD matrix’ representation OD data represents attribute column long form separate matrix. Instead rows representing OD pairs, rows represent travel origin destinations (represented columns). stplanr function od_to_odmatrix() converts ‘long’ ‘matrix’ form per column basis, illustrated : Note row column names now zone codes. cell row 1 column 2 (od_matrix[1, 2]), example, reports 94 trips zone E02002361 zone E02002393. case , people travel majority OD pair combinations, represented NAs. OD matrices relatively rudimentary data structure pre-date R’s data.frame class. Typically, contained integer counts, providing small simple datasets used 20th Century transport modelling software running limited 20th Century hardware. Although ‘OD matrix’ still sometimes used informally refer OD datadset, long OD pair representation recommended: OD matrices become unwieldy large OD datasets, likely sparse, many empty cells represented NAs. Furthermore, represent many attributes matix format, multiple lists OD matrices ‘OD arrays’ must created. demonstrated code chunk , represents travel OD pairs modes bike: function odmatrix_to_od() can converts OD matrices back convenient long form:","code":"od_matrix <- od_to_odmatrix(od[1:3]) class(od_matrix) od_matrix lapply(c(\"all\", \"bicycle\"), function(x) od_to_odmatrix(od[c(\"geo_code1\", \"geo_code2\", x)])) odmatrix_to_od(od_matrix)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"inter-and-intra-zonal-flows","dir":"Articles","previous_headings":"","what":"Inter and intra-zonal flows","title":"Origin-destination data with stplanr","text":"common, sometimes problematic, feature OD data ‘intra-zonal flows’. trips start end zone. proportion travel intra-zonal depends largely size zones used. often useful separate intra-zonal inter-zonal flows outset, demonstrated : Intra-zonal OD pairs represent short trips (size zone within trips take place) sometimes ignored OD data analyis. However, intra-zonal flows can valuable, example measuring amount localised transport activity sign local economies.","code":"(od_inter <- od %>% filter(geo_code1 != geo_code2)) (od_intra <- od %>% filter(geo_code1 == geo_code2))"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"oneway-lines","dir":"Articles","previous_headings":"","what":"Oneway lines","title":"Origin-destination data with stplanr","text":"Another subtly (symetric, origins destinations can points) OD data oneway flows can hide extent bidirectional flows plots types analysis. illustrated sample od dataset: Note second dataset 2 rows instead 3. function od_oneway() aggregates oneway lines produce bidirectional flows. default, returns sum numeric column bidirectional origin-destination pair.","code":"(od_min <- od_data_sample[c(1, 2, 9), 1:6]) (od_oneway <- od_oneway(od_min))"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"desire-lines","dir":"Articles","previous_headings":"","what":"Desire lines","title":"Origin-destination data with stplanr","text":"previous representations OD data implicitly geographic: coordinates contained data, associated another object geographic, typically zone zone centroid. problematic, meaning multiple objects files required fully represent data. Desire line representations overcome issue. geographic lines origin destination, attributes ‘long’ representation. od2line() can convert long form OD data desire lines. second argument zone centroid dataset contains ‘zone IDs’ match IDs first second columns OD data, illustrated : preceding code chunk created zones object called z, coordinates used convert object od l, geographic desire lines. desire line object stored geographic simple features object, number rows object od one column: new column geometry column, can plotted follows: default, plotting l shows attributes line: lines coordinate reference system (CRS) inherited zones data, can also plotted interactive map, follows (result shown webshot installed):","code":"z <- zones_sf class(z) l <- od2line(flow = od_inter, zones = z) class(l) nrow(od) - nrow(l) ncol(l) - ncol(od) plot(l$geometry) plot(l) library(leaflet) leaflet() %>%   addTiles() %>%   addPolygons(data = l)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"non-matching-ids","dir":"Articles","previous_headings":"Desire lines","what":"Non-matching IDs","title":"Origin-destination data with stplanr","text":"Note OD datasets may IDs match zone. can simulate situation setting third origin ID od nomatch, string zones ID: clean OD data ensure ids first two columns match ids first column zone data running od2line().","code":"od$geo_code2[3] <- \"nomatch\" od2line(od, z)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"a-larger-example-commuter-trips-in-london","dir":"Articles","previous_headings":"","what":"A larger example: commuter trips in London","title":"Origin-destination data with stplanr","text":"minimal example dataset ’ve using far fine demonstrating key concepts OD data. advanced topic, get idea possible OD data city level, helps larger dataset. use example dataset representing commuting London, accessed follows (note: code chunks evaluated vignette starts downloading 2.4 million rows take minutes run). First, can use pct package download official data UK (note addition % active column): Now input OD data (od_london) zones (population-weighted centroids cents_london case), can can convert desire lines: Even filering flows keep origins destinations London, still 300k flows. lot plot. ’ll subset , first contain inter-zonal flows (actually lines, intra-zonal flows lines length 0, essentially points) second contain flows containing threshold level flows: analysis dataset, ’s important know representative flows. crude way calculate proportion lines trips covered dataset: shows 8% lines contain half (55%) total number trips.","code":"library(dplyr)  # get nationwide OD data od_all <- pct::get_od() nrow(od_all) # > 2402201 od_all$Active <- (od_all$bicycle + od_all$foot) /   od_all$all * 100 centroids_all <- pct::get_centroids_ew() %>% sf::st_transform(4326) nrow(centroids_all) # > 7201 london <- pct::pct_regions %>% filter(region_name == \"london\") centroids_london <- centroids_all[london, ] od_london <- od_all %>%   filter(geo_code1 %in% centroids_london$msoa11cd) %>%   filter(geo_code2 %in% centroids_london$msoa11cd) od_london <- od_all[   od_all$geo_code1 %in% centroids_london$msoa11cd &     od_all$geo_code2 %in% centroids_london$msoa11cd, ] desire_lines_london <- od2line(od_london, centroids_london) nrow(desire_lines_london) # > 352654 min_trips_threshold <- 20 desire_lines_inter <- desire_lines_london %>% filter(geo_code1 != geo_code2) desire_lines_intra <- desire_lines_london %>% filter(geo_code1 == geo_code2) desire_lines_top <- desire_lines_inter %>% filter(all >= min_trips_threshold) nrow(desire_lines_top) # > 28879 nrow(desire_lines_top) / nrow(desire_lines_london) # > 0.08189046 sum(desire_lines_top$all) / sum(desire_lines_london$all) # > 0.557343"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"plotting-origin-destination-data","dir":"Articles","previous_headings":"","what":"Plotting origin-destination data","title":"Origin-destination data with stplanr","text":"OD dataset size can plotted (20,000 desire lines quick plot computers) logical next stage plot , e.g. sf’s plot() method: may disapointed result, ‘hay stack’ plot intuitive illustration flows across city. overcome issue, can set aesthetics emphasize important flows, e.g. line width sf’s plotting system: better, still ideal: code intuitive write, result still publication quality. Instead, makes sense make dedicated mapping package tmap, outlined visualisation chapter open source book Geocomputation R (Lovelace, Nowosad, Meunchow 2019). shown transport chapter book, OD flows can visualised following code: plot contains much information, providing visual overview transport pattern city, telling us : monocentric city, flows going centre. Active transport geographically dependent, dominating central north city limited uptake outskirts city. Although city centre dominates, many small clusters flows outer region, example near Heathrow airport, located far west map. Plotting OD data way can tell us much cities, different travel pattern. can use code visualise mobility patterns city. See Section 12.4 Geocomputation R see results Bristol, polycentric city lower average percentage travel walking cycling.","code":"plot(desire_lines_top[\"all\"]) lwd <- desire_lines_top$all / mean(desire_lines_top$all) / 10 desire_lines_top$percent_dont_drive <- 100 - desire_lines_top$car_driver / desire_lines_top$all * 100 plot(desire_lines_top[\"percent_dont_drive\"], lwd = lwd, breaks = c(0, 50, 70, 80, 90, 95, 100)) library(tmap) desire_lines_top <- desire_lines_top %>%   arrange(Active) tm_shape(london) + tm_borders() +   tm_shape(desire_lines_top) +   tm_lines(     palette = \"plasma\", breaks = c(0, 5, 10, 20, 40, 100),     lwd = \"all\",     scale = 9,     title.lwd = \"Number of trips\",     alpha = 0.5,     col = \"Active\",     title = \"Active travel (%)\",     legend.lwd.show = FALSE   ) +   tm_scale_bar() +   tm_layout(     legend.bg.alpha = 0.5,     legend.bg.color = \"white\"   )"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"summaries-by-origin-and-destination","dir":"Articles","previous_headings":"","what":"Summaries by origin and destination","title":"Origin-destination data with stplanr","text":"possible group OD data origin destination gain information zone level. code resulting plot , example, summarises number people departing zone mode: can observe number features, including : Rail much common south, reflecting greater density local rail network, short distances stops, South city. Cars dominat outer fringes, especiall West. Taxi motorbike use intriguing clusters West (perhaps around wealthy Kensington area taxis). pattern quite different calculate destinations:","code":"zones_london <- pct::get_pct_zones(\"london\") %>%   select(\"geo_code\") origin_attributes <- desire_lines_top %>%   sf::st_drop_geometry() %>%   group_by(geo_code1) %>%   summarize_if(is.numeric, sum) %>%   dplyr::rename(geo_code = geo_code1) # origin_attributes <- zones_origins <- left_join(zones_london, origin_attributes, by = \"geo_code\") plot(zones_origins, border = NA) destination_attributes <- desire_lines_top %>%   sf::st_drop_geometry() %>%   group_by(geo_code2) %>%   summarize_if(is.numeric, sum) %>%   dplyr::rename(geo_code = geo_code2) %>%   mutate_at(vars(-matches(\"geo_|all\")), funs(. / all)) %>%   left_join(zones_london, ., by = \"geo_code\")  plot(destination_attributes, border = NA)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Origin-destination data with stplanr","text":"Despite importance origin-destination datasets transport research, surprisingly guides dedicated working using open source software. following suggestions based reading — suggestions good resources working OD data, let know! Section 12.4 Geocomputation R (Lovelace, Nowosad, Meunchow 2019) puts OD data wider context geographic transport data. Martin et al. (2018) describe methods classifying OD pairs based demographic data. kepler.gl website provides nifty web application visualising OD data. Documentation open source microscopic transport modelling software SUMO describes ways reading-OD file formats covered vignette. excellent introduction modelling visualising OD data introductory vignette flows R package.","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-od.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Origin-destination data with stplanr","text":"summary, stplanr provides many functions working OD data. OD data important component transport planning modelling can, used creativity skill, assist sustainable transport planning global transition away fossil fuels. many things can done OD data, supported future versions package. suggest new features otherwise get touch, see stplanr issue tracker github.com/ropensci/stplanr.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"stplanr: A Package for Transport Planning","text":"paper now peer reviewed published R Journal. Please see published version journal.r-project.org cite Lovelace Ellison (2018). code presented paper requires stplanr 0.8.5 earlier, can installed follows:","code":"remotes::install_github(\"ropensci/stplanr\", ref = \"v0.8.5\")"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"stplanr: A Package for Transport Planning","text":"Transport planning can broadly defined process designing evaluating transport interventions (de Dios Ortuzar Willumsen 2011) usually ultimate aim improving transport systems economic, social environmental perspectives. inevitably involves degree subjective judgment intuition. proliferation new transport datasets — increasing availability hardware software make sense — great potential discipline become evidence-based scientific (Balmer, Rieser, Nagel 2009). Transport planners always undertaken wide range computational activities (Boyce Williams 2015), digital revolution demands grown beyond capabilities single, monolithic product. diversity tasks , need democratic accountability public decision making, suggests future-proof transport planning software : flexible, able handle wide range data formats scalable, able work multiple geographic levels single streets large cities regions robust reliable, tested range datasets able work ’box’ range real-world projects open source reproducible, ensuring transparency encouraging citizen science paper sets demonstrate open source software command-line interface (CLI) can provide foundation transport planning software meets criteria. R provides strong basis progress direction already contains functionality used common transport planning workflows. , greatly improved R’s spatial abilities (Bivand, Pebesma, G’omez-Rubio 2013), work consolidated extended recent package. Building foundations number spatial packages developed applied domains including: disease mapping modelling, packages (Kim Wakefield 2016; Brown Zhou 2016); spatial ecology, adehabitat family packages (Calenge 2006); visualisation, packages SpatialEpi, diseasemapping Brown (2016). However, little prior work develop R functionality designed specifically transport planning, notable exceptions TravelR (package R-Forge last updated 2012) tidytransit (package handling General Transit Feed Specification (GTFS) data). purpose stplanr provide toolbox rather specific solution transport planning, emphasis spatial data active modes. emphasis timely given recent emphasis sustainability (Banister 2008) ‘Big Data’ (Zheng et al. 2016) wider field transport planning. major motivation lack R packages, open source software general, transport applications. may surprising given ubiquity transport problems;1 R’s proficiency handling spatial, temporal travel survey data describe transport systems; growing popularity R applied domains (Jalal et al. 2017; Moore Hutchinson 2017). Another motivation growth open access datasets: main purpose early versions package process open origin-destination data (Lovelace et al. 2017). R already used transport applications, illustrated recent research applies packages domains transport problems. instance, Efthymiou Antoniou (2012) use R analyse data collected online survey focused car-sharing, bicycle-sharing electric vehicles. Efthymiou Antoniou (2012) also used R collect analyse transport-related data Twitter using packages including , . packages used download, parse plot Twitter data using method can repeated results reproduced updated. general statistical analyses also conducted transport-related datasets using packages including (Diana 2012; Cerin et al. 2013). Despite rising use R transport research, yet package transport planning. design R language, emphasis flexibility, data processing statistical modelling, suggests can provide powerful environment transport planning research. many quantitative methods transport planning, many fit classic ‘four stage’ transport model involves following steps (de Dios Ortuzar Willumsen 2011): (1) trip generation estimate trip freqency origins; (2) distribution trips destinations; (3) modal split trips walking, cycling, buses etc.; (4) assignment trips transport route network. like add two stages big data age: (0) data processing exploration; (5) validation. sequence way transport modelling argued dominance reduced innovation. However certainly common approach provides useful schema classifying kinds task stplanr can tackle: Accessing processing data transport infrastructure behaviour (stage 0) Analysis visualisation transport network (0) Analysis origin-destination (OD) data visualisation resulting ‘desire lines’ allocation desire lines roads guideways via routing services aggregation routes estimate total levels flow segments throughout transport network Development models estimate transport behaviour currently various scenarios change calculation ‘catchment areas’ affected transport infrastructure automation tasks can assist researchers practitioners create evidence decision making. data processing analysis stages fast painless, time can dedicated visualisation decision making. allow researchers focus problems, rather clunky graphical user interfaces (GUIs), ad-hoc scripts generalised. Furthermore, process can made reproducible accessible (e.g. via online visualisation packages shiny), help transport planning move away reliance ‘black boxes’ (Waddell 2002) empower citizens challenge decisions made transport planning authorities based evidence (Hollander 2016). many advantages using scriptable, interactive open source language R transport planning. approach enables: reproducible research; automation sharing code researchers; reduced barriers innovation anyone can create new features benefit planners; easier interaction non domain experts (lack dedicated software); integration software systems, illustrated use generate JavaScript sharing interactive maps transport planning, used publicly accessible Propensity Cycle Tool (Lovelace et al. 2017). Furthermore, R strong user community can support newcomers (stplanr peer reviewed thanks community surrounding ROpenSci). advantages using R specifically develop functionality described paper excellent geo-statistical capabilities (Pebesma et al. 2015), visualisation packages (e.g. tmap, ggplot2), support logit models (useful modelling modal shift), support many formats transport datasets stored (e.g. via haven rio packages).","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"package-structure-and-functionality","dir":"Articles","previous_headings":"","what":"Package structure and functionality","title":"stplanr: A Package for Transport Planning","text":"package can installed loaded usual way (see package’s README dependencies access development versions): illustrated message emitted stplanr loaded, depends . means spatial data classes commonly used package work generic R functions summary, aggregate , illustrated figures , plot .","code":"install.packages(\"stplanr\") library(stplanr)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"core-functions-and-classes","dir":"Articles","previous_headings":"Package structure and functionality","what":"Core functions and classes","title":"stplanr: A Package for Transport Planning","text":"package’s core functions structured around 3 common types spatial transport data: Origin-destination (OD) data, report number people travelling origin-destination pairs. type data explicitly spatial (OD datasets usually represented data frames) represents movement space points geographical space. example provided flow dataset. Line data, one dimensional linear features surface Earth. typically stored SpatialLinesDataFrame. Route data special types lines allocated transport network. Routes typically result allocation straight ‘desire line’ allocated route network route_ function. Route network represent many overlapping routes. typically stored SpatialLinesDataFrame. ease use, functions focussed data type developed names prefixed od_, line_ route_ respectively. selection presented Table 1. Additional ‘core functions’ developed, prefixed rn_ (working route network data) g_ functions geographic operations buffer creation lat/lon projected data (function currently named buff_geo). plan elicit feedback changes implementing . tip hat concept type stability (e.g. implemented ), also plan make core functions stplanr type-stable future releases. Core functions, begin prefixes listed , follow ’s lead return objects class input. However limitations approach: break existing functionality mean output objects larger size necessary (line_bearing, example, need duplicate spatial data contained input). Instead, plan continue name functions around type input data take, open minded function input-output data class conventions, especially context new class system implemented . class system developed data type (option discussed final section). common data types used stplanr assumed data frames spatial datasets. Transport datasets diverse. therefore many functions ad-hock names. Rather attempt systematic description stplanr’s functions (can gleaned online manual) illuminating see work together, part transport planning workflow. workflows, begins data access ends visualisation.","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"accessing-and-processing-transport-data","dir":"Articles","previous_headings":"Package structure and functionality","what":"Accessing and processing transport data","title":"stplanr: A Package for Transport Planning","text":"Gaining access data often first stage transport research. often long protracted process thankfully becoming easier thanks ‘open data’ movement packages tigris making data access within R easier . stplanr provides variety different functions facilitate importing common data formats used transport analysis R. Although transport analysis generally requires transport-specific datasets, also typically relies heavily common sources data including census data. case, stplanr also includes functions may useful involved transport research. includes read_table_builder function importing data Australian Bureau Statistics (ABS) UK’s Stats19 road traffic casualty dataset. brief example latter demonstrated , begins downloading data (warning downloads ~100 MB data): data saved default directory, determined tempdir(), can read-cleaned read_stats19_ functions (note call format_stats19_ functions internally clean datasets add correct labels variables): resulting datasets (representing accident, casualty vehicle level data, respectively) can merged made geographic, illustrated : Now casualty data cleaned, subsetted (include serious cycle crashes) converted spatial class system, can analyse using geographical datasets type commonly used stplanr. following code, example, geographically subsets dataset include crashes occured within bounding box route network dataset provided stplanr (version 0.1.7 beyond) using function bb2poly, converts spatial dataset box, represented rectangular SpatialPolygonsDataFrame: code chunk shows importance understanding geographical data working transport data. converting casualty data spatial data class, adding coordinate reference system (CRS), transport planners researchers can link important dataset back route network. can now perform GIS operations results. next code chunk, example, finds fatalities took place within 100 m route network, using function buff_geo: can visualised using base R graphics, extended , illustrated Figure \\(\\ref{fig:fats}\\). provides good start analysis publication-quality plots interactive plots, designed public engagement, recommend using dedicated visualisation packages work spatial data .","code":"dl_stats19() # download and extract stats19 road traffic casualty data #> [1] \"Data saved at: /tmp/RtmpppF3E2/Accidents0514.csv\" #> [2] \"Data saved at: /tmp/RtmpppF3E2/Casualties0514.csv\" #> [3] \"Data saved at: /tmp/RtmpppF3E2/Vehicles0514.csv\" ac <- read_stats19_ac() ca <- read_stats19_ca() ve <- read_stats19_ve() library(dplyr) ca_ac <- inner_join(ca, ac) ca_cycle <- ca_ac %>%   filter(Casualty_Severity == \"Fatal\" & !is.na(Latitude)) %>%   select(Age = Age_of_Casualty, Mode = Casualty_Type, Longitude, Latitude) ca_sp <- SpatialPointsDataFrame(coords = ca_cycle[3:4], data = ca_cycle[1:2]) data(\"route_network\") # devtools::install_github(\"ropensci/splanr\")version 0.1.7 proj4string(ca_sp) <- proj4string(route_network) bb <- bb2poly(route_network) proj4string(bb) <- proj4string(route_network) ca_local <- ca_sp[bb, ] rnet_buff_100 <- geo_buffer(route_network, width = 100) ca_buff <- ca_local[rnet_buff_100, ] plot(bb, lty = 4) plot(rnet_buff_100, col = \"grey\", add = TRUE) points(ca_local, pch = 4) points(ca_buff, cex = 3)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"creating-geographic-desire-lines","dir":"Articles","previous_headings":"Package structure and functionality","what":"Creating geographic desire lines","title":"stplanr: A Package for Transport Planning","text":"Perhaps common type aggregate-level transport information origin-destination (‘OD’) data. can presented either matrix (commonly) long table OD pairs. example type raw data provided (see ?flow see dataset created). Although flow data displayed describes movement geographical space, contains explicitly geographical information. Instead, coordinates origins destinations linked separate geographical dataset also must loaded analyse flows. common problem solved function od2line. geographical data set points representing centroids origin destinations, saved SpatialPointsDataFrame. Geographical data R best represented Spatial* objects, use S4 object engine. explains close integration stplanr R’s spatial packages, especially sp, defines S4 spatial object system. use od2line combine flow cents, join former latter. visualise l object created next section. data now form much easier analyse. can plot data command plot(l), possible . SpatialLinesDataFrame object also contains data per line, also helps visualisation flows, illustrated Figure \\(\\ref{fig:lines_routes}\\).","code":"data(\"flow\", package = \"stplanr\") head(flow[c(1:3, 12)]) data(\"cents\", package = \"stplanr\") as.data.frame(cents[1:3, -c(3, 4)]) l <- od2line(flow = flow, zones = cents)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"allocating-flows-to-the-transport-network","dir":"Articles","previous_headings":"Package structure and functionality","what":"Allocating flows to the transport network","title":"stplanr: A Package for Transport Planning","text":"common problem faced transport researchers network allocation: converting ‘crow flies’ lines illustrated figure routes. complex, winding paths people animals make avoid obstacles buildings make journey faster efficient (e.g. following route network). difficult (recently near impossible using free software) size complexity transport networks, complexity realistic routing algorithms need context-specificity routing engine. Inexperienced cyclists, example, take different route heavy goods vehicle. stplanr tackles issue using 3rd party APIs provide route-allocation. Route allocation undertaken  functions  . allocate single OD pair, represented text string ‘geo-coded’, pair coordinates, two SpatialPoints objects, representing origins destinations. illustrated route_cyclestreet, uses CycleStreets.net API, routing service “cyclists cyclists” offers range route strategies (primarily ‘fastest’, ‘quietest’ ‘balanced’) based detailed analysis cyclist wayfinding:2 raw output routing APIs usually provided JSON GeoJSON text string. default, route_cyclestreet saves number key variables (including length, time, hilliness busyness variables generated CycleStreets.net) attribute data provided API. user wants save raw output, save_raw argument can used: Additional arguments taken route_ functions depend routing function question. changing plan argument route_cyclestreet fastest, quietest balanced, example, routes favouring speed, quietness balance speed quietness saved, respectively. automate creation route-allocated lines many desire lines, line2route function loops line, wrapping route_ function input. output SpatialLinesDataFrame number dimensions input dataset (see right panel Figure \\(\\ref{fig:lines_routes}\\)). result ‘batch routing’ exercise illustrated Figure \\(\\ref{fig:lines_routes}\\). red lines left hand panel different hypothetical straight ‘desire lines’ often used transport research, highlighting importance route-allocation functionality. estimate amount capacity needed segment transport network, overline function demonstrated , used divide line geometries unique segments aggregate overlapping values. results, illustrated right-hand panel Figure \\(\\ref{fig:lines_routes}\\), can used estimate need improve transport network, example informing decision build new bicycle paths. Limitations route_cyclestreet routing API include specificity, one mode (cycling) single region (UK part Europe). overcome limitations, additional routing APIs added functions route_graphhopper, route_transportapi_public viaroute. interface Graphhopper, TransportAPI Open Source Routing Machine (OSRM) routing services, respectively. great advantage OSRM allows run routing services local server, greatly increasing rate route generation. short example finding route car bike New York Oaxaca demonstrates route_graphhopper can collect geographical data routes various modes, anywhere world. output, shown Table \\(\\ref{tab:xtnyoa}\\), shows function also saves time, distance (bike trips) vertical distance climbed trips.","code":"route_bl <- route_cyclestreets(from = \"Bradford\", to = \"Leeds\") route_c1_c2 <- route_cyclestreets(cents[1, ], cents[2, ]) route_bl_raw <- route_cyclestreets(from = \"Bradford\", to = \"Leeds\", save_raw = TRUE) routes_fast <- line2route(l = l, route_fun = route_cyclestreet) plot(route_network, lwd = 0) plot(l, lwd = l$All / 10, add = TRUE) lines(routes_fast, col = \"red\") routes_fast$All <- l$All rnet <- overline(routes_fast, \"All\", fun = sum) rnet$flow <- rnet$All / mean(rnet$All) * 3 plot(rnet, lwd = rnet$flow / mean(rnet$flow)) ny2oaxaca1 <- route_graphhopper(\"New York\", \"Oaxaca\", vehicle = \"bike\") ny2oaxaca2 <- route_graphhopper(\"New York\", \"Oaxaca\", vehicle = \"car\") rbind(ny2oaxaca1@data, ny2oaxaca2@data)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"modelling-travel-catchment-areas","dir":"Articles","previous_headings":"Package structure and functionality","what":"Modelling travel catchment areas","title":"stplanr: A Package for Transport Planning","text":"Accessibility transport services particularly important topic considering public transport active travel frequent steep reduction use distances access services (infrastructure) increase. result, planning transport services infrastructure frequently focuses several measures accessibility including distance, also travel times frequencies weighted population. functions stplanr intended provide method estimating accessibility measures well calculating population can access specific services (.e., estimating catchment area). Catchment areas particular widely used measure accessibility attempts quantify likely target group particular service, visualise geographic area covered service. instance, passengers often said willing walk 400 metres bus stop, 800 metres railway station . Although distances may appear relatively arbitrary found underestimate true catchment area bus stops railway stations  nonetheless represent good, albeit somewhat conservative, starting point catchment areas can determined. many cases, catchment areas calculated basis straight-line (“crow flies”) distances. simplistic, relatively appealing approach requires little additional data straight-forward understand. stplanr provides functionality calculates catchment areas using straight-line distances calc_catchment function. function takes SpatialPolygonsDataFrame contains population () data, typically census, Spatial* layer contains geometry transport facility. two layers overlayed calculate statistics desired catchments including proportioning polygons account proportion located within catchment area. illustrate catchment areas can calculated, stplanr contains sample datasets stored ESRI Shapefile format (commonly used format distributing GIS layers) can together used calculate sample catchment areas. One datasets (smallsa1) contains population data Statistical Area 1 (SA1) zones Sydney, Australia. second contains hypothetical cycleways aligned streets Sydney. code unzips datasets reads shapefiles. Calculating catchment area straightforward addition specifying required datasets, vector containing column names calculate statistics distance required. Since proportioning areas assumes projected data, unprojected data automatically projected either common projection (one already projected) specified projection. emphasised choice projection important effect results meaning setting local projection recommended achieve accurate results. looking data.frame associated SpatialPolygonsDataFrame returned calc_catchment function, total population within catchment area can seen nearly 40,000 people. catchment area can also plotted Spatial* object using plot function using code result shown Figure \\(\\ref{fig:catchmentplot}\\). simplistic catchment area useful straight-line distance reasonable approximation route taken walk (cycle) transport facility. However, often case. catchment area Figure \\(\\ref{fig:catchmentplot}\\) initially appears reasonable red-shaded catchment area includes area requires travelling around bay access (green-coloured) cycleway. allow realistic catchment areas situations, stplanr provides calc_network_catchment function uses principle calc_catchment also takes account transport network. use calc_network_catchment, transport network needs prepared can used conjunction previous datasets. Preparation dataset involves using SpatialLinesNetwork function create network SpatialLinesDataFrame. function combines SpatialLinesDataFrame graph network (using  package) provide basic routing functionality. network used calculate shortest actual paths within specific catchment distance. process involves following code: network catchment calculated using similar method calc_catchment minor changes. Specifically including SpatialLinesNetwork, using maximpedance parameter define distance, distance additional distance network. contrast distance parameter based straight-line distance calc_catchment calc_network_catchment functions, maximpedance parameter maximum value units network’s weight attribute. practice generally distance metres can also travel times, risk measures. calculated, network catchment area can used just straight-line network catchment. includes extracting catchment population 128,000 plotting original catchment area together original area results shown Figure \\(\\ref{fig:netcatchplot}\\):","code":"data_dir <- system.file(\"extdata\", package = \"stplanr\") unzip(file.path(data_dir, \"smallsa1.zip\")) unzip(file.path(data_dir, \"testcycleway.zip\")) sa1income <- as(sf::read_sf(\"smallsa1.shp\"), \"Spatial\") testcycleway <- as(sf::read_sf(\"testcycleway.shp\"), \"Spatial\") # Remove unzipped files file.remove(list.files(pattern = \"^(smallsa1|testcycleway).*\")) remotes::install_github(\"ropensci/stplanr\") catch800m <- calc_catchment(   polygonlayer = sa1income,   targetlayer = testcycleway,   calccols = c(\"Total\"),   distance = 800,   projection = \"austalbers\",   dissolve = TRUE ) plot(sa1income, col = \"light grey\") plot(catch800m, col = rgb(1, 0, 0, 0.5), add = TRUE) plot(testcycleway, col = \"green\", add = TRUE) unzip(file.path(data_dir, \"sydroads.zip\")) sydroads <- as(sf::read_sf(\".\", \"roads\"), \"Spatial\") file.remove(list.files(pattern = \"^(roads).*\")) sydnetwork <- SpatialLinesNetwork(sydroads) netcatch800m <- calc_network_catchment(   sln = sydnetwork,   polygonlayer = sa1income,   targetlayer = testcycleway,   calccols = c(\"Total\"),   maximpedance = 800,   distance = 100,   projection = \"austalbers\" ) plot(sa1income, col = \"light grey\") plot(catch800m, col = rgb(1, 0, 0, 0.5), add = TRUE) plot(netcatch800m, col = rgb(0, 0, 1, 0.5), add = TRUE) plot(testcycleway, col = \"green\", add = TRUE)"},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"modelling-mode-choice","dir":"Articles","previous_headings":"Modelling and visualisation","what":"Modelling mode choice","title":"stplanr: A Package for Transport Planning","text":"Route-allocated lines allow estimation route distance cirquity (route distance divided Euclidean distance). variables can help model rate flow origins destination, illustrated left-hand panel Figure \\(\\ref{fig:euclidfastest}\\). code demonstrates objects generated stplanr can used undertake analysis, line_length function used find distance, meters, lat/lon data. left hand panel Figure \\(\\ref{fig:euclidfastest}\\) shows expected strong correlation Euclidean (\\(d_E\\)) fastest route (\\(d_{Rf}\\)) distance. However, OD pairs proportionally higher route distance others, illustrated distance black line plot: represents : ratio network distance Euclidean distance : \\[  Q = \\frac{d_{Rf}}{d_E} \\] extension concept cirquity ‘quietness diversion factor’ (\\(QDF\\)) desire line , ratio route distance quiet route option (\\(d_{Rq}\\)) fastest: \\[  QDF = \\frac{d_{Rq}}{d_{Rf}} \\] Thanks ‘quietest’ route option provided route_cyclestreet, can estimate average values metrics follows: results show cycle paths particularly direct study region international standards . hardly surprisingly given small size sample short distances covered: \\(Q\\) tends decrease decaying rate distance. surprising \\(QDF\\) close unity, imply quiet routes constructed along direct, therefore sensible routes. caution assumptions, however: small sample desire lines , time explored, find ‘quietness diversion factor respect time’ (\\(QDF_t\\)) slightly larger:","code":"l$d_euclidean <- line_length(l) l$d_rf <- routes_fast@data$length plot(l$d_euclidean, l$d_rf,   xlab = \"Euclidean distance\", ylab = \"Route distance\") abline(a = 0, b = 1) abline(a = 0, b = 1.2, col = \"green\") abline(a = 0, b = 1.5, col = \"red\") routes_slow <- line2route(l, route_cyclestreet, plan = \"quietest\") l$d_rq <- routes_slow$length # quietest route distance Q <- mean(l$d_rf / l$d_euclidean, na.rm = TRUE) QDF <- mean(l$d_rq / l$d_rf, na.rm = TRUE) Q QDF (QDFt <- mean(routes_slow$time / routes_fast$time, na.rm = TRUE))"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"models-of-travel-behaviour","dir":"Articles","previous_headings":"Modelling and visualisation","what":"Models of travel behaviour","title":"stplanr: A Package for Transport Planning","text":"many ways estimating flows origins destinations, including spatial interaction models, four-stage transport model gravity models (‘distance decay’). stplanr aims eventually facilitate creation many types flow model. present functions modelling distance decay, something like add future versions stplanr. Distance decay especially important concept sustainable transport planning due physical limitations ability people walk cycle large distances . can explore relationship distance proportion trips made walking, using object l generated stplanr. Based right-hand panel Figure \\(\\ref{fig:euclidfastest}\\), clear negative relationship distance trips proportion trips made walking. unsurprising: beyond certain distance (around 1.5km according data presented figure ) walking usually seen slow modes considered. According academic literature, ‘distance decay’ non-linear number functions proposed fit distance decay curves . range options test just two forms. compare ability linear log-square-root functions fit data contained l walking. results regression models can seen using summary(). Surprisingly, Euclidean distance better predictor walking route distance, strong conclusions can drawn finding, small sample desire lines (n = 42). results purely illustrative, kind possibilities created using stplanr conjuction R’s modelling capabilities (see Figure ).","code":"l$pwalk <- l$On.foot / l$All plot(l$d_euclidean, l$pwalk,   cex = l$All / 50,   xlab = \"Euclidean distance (m)\", ylab = \"Proportion of trips by foot\" ) lm1 <- lm(pwalk ~ d_euclidean, data = l@data, weights = All) lm2 <- lm(pwalk ~ d_rf, data = l@data, weights = All) lm3 <- glm(pwalk ~ d_rf + I(d_rf^0.5),   data = l@data, weights = All, family = quasipoisson(link = \"log\") ) plot(l$d_euclidean, l$pwalk,   cex = l$All / 50,   xlab = \"Euclidean distance (m)\", ylab = \"Proportion of trips by foot\" ) l2 <- data.frame(d_euclidean = 1:5000, d_rf = 1:5000) lm1p <- predict(lm1, l2) lm2p <- predict(lm2, l2) lm3p <- predict(lm3, l2) lines(l2$d_euclidean, lm1p) lines(l2$d_euclidean, exp(lm2p), col = \"green\") lines(l2$d_euclidean, exp(lm3p), col = \"red\")"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"visualisation","dir":"Articles","previous_headings":"Modelling and visualisation","what":"Visualisation","title":"stplanr: A Package for Transport Planning","text":"Visualisation important aspect transport study, enables researchers communicate findings researchers, policy-makers , ultimately, public. may therefore come surprise stplanr contains functions visualisation. Instead, users encouraged make use existing spatial visualisation tools R, tmap, leaflet ggmap . Furthermore, development online application frameworks shiny, now easier ever make results transport analysis modelling projects available public. example online interface Propensity Cycle Tool (PCT). results project, generated using stplanr, presented zone, desire line Route Network levels . great potential expand principle publicly accessible transport planning tools via ‘web apps’, perhaps new R packages dedicated visualising transport data.","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-paper.html","id":"future-directions-of-travel","dir":"Articles","previous_headings":"","what":"Future directions of travel","title":"stplanr: A Package for Transport Planning","text":"paper demonstrated great potential R used transport planning. R’s flexibility, powerful GIS capabilities  free accessibility makes well-suited needs transport planners researchers, especially wanting avoid high costs market-leading products. Rather ‘reinvent wheel’ (e.g. new class system), stplanr builds existing packages  classes work common transport data formats. useful see stplanr, R transport planning general, addition tool transport planner’s cabinet. can understood one part wider movement making transport planning open democratic process. developments movement include increasing availability open data  rise open source products transport modelling, SUMO, MATSim MITSIMLAB . stplanr, focus GIS operations rather microscopic vehicle-level behaviour, can complement software help make better use new open data sources. transport planning inherently spatial activity, stplanr occupies important niche transport planning software landscape, focus spatial transport data. great potential development stplanr many directions. Desirable developments include additional functions modelling modal split, examample functions create commonly distance decay curves commonly found active travel research  improving computational efficiency existing functions make methods scalable large databases. priority stplanr however, keep focus geographic functions transport planning. many opportunities direction, including: Functions assess environment surrounding routes, e.g. via integration -development osmdata package. Functions match different GIS routes, perhaps building Hausdorf distance algorithm implemented  function gDistance. Additional functions route-allocation travel, e.g. via interface OpenTripPlanner API. Functions aggregating large GPS trace datasets (e.g. raster cells) anonymisation analysis/visualisation purposes. creation class system spatial transport datasets, represent spatial route route networks (perhaps classes named  ). short-term priority beneficial coincide developments migration  spatial classes. spatial data processing capabilities increase range transport planning tasks stplanr can facilitate. planned development activity useful, vital new functionality intuitive. R famously steep learning curve. Implementing simple concepts consistent naming systems  ensuring ‘type stability’ can greatly improve usability package. reason, much future work stplanr go improving documentation user-friendliness. Like much open source software stplanr open-ended project, work--progress. set clear motivations developing transport planning capabilities R believe current version stplanr (0.1.6) provides major step direction compared available couple years ago. much . therefore welcome input package’s priorities lie, evolve future ensure well-developed sustained.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-parallel.html","id":"with-old-route_cyclestreets-function","dir":"Articles","previous_headings":"","what":"With old route_cyclestreets function","title":"Parallel routing and performance with stplanr","text":"","code":"# ?route l = flowlines_sf %>%    dplyr::filter() t1 = Sys.time() routes_route_cyclestreet = line2route(l) Sys.time() - t1 ncol(routes_route_cyclestreet) nrow(routes_route_cyclestreet) names(routes_route_cyclestreet) routes_route_cyclestreet_joined = dplyr::inner_join(routes_route_cyclestreet, sf::st_drop_geometry(l)) Sys.time() - t1 rnet_go_dutch = overline(routes_route_cyclestreet_joined, \"All\") Sys.time() - t1 tm_shape(rnet_go_dutch) +   tm_lines(lwd = 5, col = \"All\", breaks = c(0, 10, 100, 500, 1000), palette = \"viridis\")"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-parallel.html","id":"with-new-route-function","dir":"Articles","previous_headings":"","what":"With new route function","title":"Parallel routing and performance with stplanr","text":"","code":"# ?route t1 = Sys.time() routes_journey = route(l = l, route_fun = cyclestreets::journey) ncol(routes_journey) nrow(routes_journey)  Sys.time() - t1 names(routes_journey) rnet_go_dutch_journey = overline(routes_journey, \"All\") Sys.time() - t1 rnet_go_dutch_agg = overline(routes_journey, \"All\") Sys.time() - t1 tm_shape(rnet_go_dutch_agg) +   tm_lines(lwd = 5, col = \"All\", breaks = c(0, 10, 100, 500, 1000), palette = \"viridis\")"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-parallel.html","id":"with-new-route-function-in-parallel","dir":"Articles","previous_headings":"","what":"With new route function in parallel","title":"Parallel routing and performance with stplanr","text":"","code":"# ?route t1 = Sys.time()   # load parallel stuff cl <- makeCluster(detectCores()) clusterExport(cl, c(\"journey\")) Sys.time() - t1 routes_journey_par = route(l = l, route_fun = cyclestreets::journey, cl = cl) # multi-core stopCluster(cl) # kill cluster  Sys.time() - t1 Sys.time() - t1 names(routes_journey_par) rnet_go_dutch_journey = overline(routes_journey_par, \"All\") Sys.time() - t1 rnet_go_dutch_agg = overline(routes_journey_par, \"All\") Sys.time() - t1 tm_shape(rnet_go_dutch_agg) +   tm_lines(lwd = 5, col = \"All\", breaks = c(0, 10, 100, 500, 1000), palette = \"viridis\")"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-parallel.html","id":"in-parallel-with-quietness-plan","dir":"Articles","previous_headings":"","what":"In parallel with quietness plan","title":"Parallel routing and performance with stplanr","text":"","code":"# ?route t1 = Sys.time()   # load parallel stuff library(parallel) library(cyclestreets) cl <- makeCluster(detectCores()) clusterExport(cl, c(\"journey\")) Sys.time() - t1 routes_journey_par = route(l = l, route_fun = cyclestreets::journey, cl = cl, plan = \"quietest\") # multi-core stopCluster(cl) # kill cluster  Sys.time() - t1 Sys.time() - t1 names(routes_journey_par) rnet_go_dutch_journey = overline(routes_journey_par, \"All\") Sys.time() - t1 rnet_go_dutch_agg = overline(routes_journey_par, \"All\") Sys.time() - t1 tm_shape(rnet_go_dutch_agg) +   tm_lines(lwd = 5, col = \"All\", breaks = c(0, 10, 100, 500, 1000), palette = \"viridis\")"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-parallel.html","id":"tests","dir":"Articles","previous_headings":"In parallel with quietness plan","what":"Tests","title":"Parallel routing and performance with stplanr","text":"","code":"routes_journey_aggregated = routes_journey %>% # already has data from data frame in there!   group_by(id) %>%    summarise(All = median(All)) %>%    sf::st_cast(\"LINESTRING\")   rnet_journey_dplyr = routes_journey %>% # already has data from data frame in there!   group_by(name, distances) %>%    summarise(All = sum(All))  Sys.time() - t1 tm_shape(rnet_journey_dplyr) +   tm_lines(lwd = 5, col = \"All\", breaks = c(0, 10, 100, 500, 1000), palette = \"viridis\") # quite different...   rnet_journey_go_dutch = routes_journey %>%    group_by(start_longitude, start_latitude, finish_longitude, finish_latitude) %>%    summarise(All = sum(All))"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-route-nets.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Route networks with stplanr","text":"Route networks represent network highways, cycleways, footways ways along transport happens. can get route network data OpenStreetMap (e.g. via osmdata R package) providers transport network data.","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-route-nets.html","id":"creating-route-networks-from-overlapping-routes","dir":"Articles","previous_headings":"","what":"Creating route networks from overlapping routes","title":"Route networks with stplanr","text":"Unlike routes, segment geometry route network can appear . stplanr can used convert series routes route network, using function overline(), illustrated :  figure shows overline() breaks routes segments values removes overlapping segments. form geographic aggregation.","code":"library(stplanr) library(sf) sample_routes <- routes_fast_sf[2:6, 1] sample_routes$value <- rep(1:3, length.out = 5) rnet <- overline(sample_routes, attrib = \"value\") plot(sample_routes[\"value\"], lwd = sample_routes$value, main = \"Routes\") plot(rnet[\"value\"], lwd = rnet$value, main = \"Route network\")"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-route-nets.html","id":"identifying-route-network-groups","dir":"Articles","previous_headings":"","what":"Identifying route network groups","title":"Route networks with stplanr","text":"Route networks can represented graph. Usually segments connected together, meaning graph connected. can show simple network connected follows: complex network may connected way, shown example :  elements network clearly divided groups. can identify groups follows:","code":"touching_list = st_intersects(sample_routes) g = igraph::graph.adjlist(touching_list) #> Warning: `graph.adjlist()` was deprecated in igraph 2.0.0. #> ℹ Please use `graph_from_adj_list()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. igraph::is_connected(g) #> [1] TRUE # piggyback::pb_download_url(\"r_key_roads_test.Rds\") u = \"https://github.com/ropensci/stplanr/releases/download/0.6.0/r_key_roads_test.Rds\" rnet_disconnected = readRDS(url(u)) touching_list = sf::st_intersects(rnet_disconnected) g = igraph::graph.adjlist(touching_list) igraph::is_connected(g) #> [1] FALSE sf:::plot.sfc_LINESTRING(rnet_disconnected$geometry) rnet_disconnected$group = rnet_igroup(rnet_disconnected)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-route-nets.html","id":"routing-on-route-networks","dir":"Articles","previous_headings":"","what":"Routing on route networks","title":"Route networks with stplanr","text":"","code":"# plot(rnet$geometry) # plot(sln_nodes, add = TRUE) # xy_path <- sum_network_routes(sln = sln, start = xy_nodes[1], end = xy_nodes[2], sumvars = \"length\") # # xy_path = sum_network_links(sln = sln, start = xy_nodes[1], end = xy_nodes[2]) # plot(rnet$geometry) # plot(xy_sf$geometry, add = TRUE) # plot(xy_path$geometry, add = TRUE, lwd = 5)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-route-nets.html","id":"adding-new-nodes","dir":"Articles","previous_headings":"","what":"Adding new nodes","title":"Route networks with stplanr","text":"New nodes can added network, although done graph representation created. Imagine want create point half way along westerly route segment network, near coordinates -1.540, 53.826:","code":"new_point_coordinates <- c(-1.540, 53.826) p <- sf::st_sf(geometry = sf::st_sfc(sf::st_point(new_point_coordinates)), crs = 4326)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-route-nets.html","id":"other-approaches","dir":"Articles","previous_headings":"","what":"Other approaches","title":"Route networks with stplanr","text":"approaches working route networks include: sDNA, open source C++ library analysing route networks estimating flows segments across network segments sfnetworks, R package provides alternative igraph/sf spatial network class dodgr, R package providing functions calculating distances directed graphs cppRouting, package routing C++ Chapter 10 Geocomputation R, provides context demonstrates transport planning workflow R.","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-routing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Transport routing with stplanr","text":"Routing process identifying routes enable movement two geographic locations along shortest path (based mode-specific routing profiles) ‘optimal’ way, based route network data. open routing engines rely OpenStreetMap (OSM) data. use example Isle Wight demonstrate routing engines. get OSM data Isle Wight can run following commands:","code":"remotes::install_github(\"itsleeds/geofabrik\") library(geofabrik) roads_iow = get_geofabrik(name = \"Isle of Wight\") f = gf_filename(\"Isle of Wight\") file.copy(f, \"iow.pbf\") options(osrm.server = \"https://0.0.0.0:5000/\", osrm.profile = \"driving\")"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr-routing.html","id":"osrm","dir":"Articles","previous_headings":"","what":"OSRM","title":"Transport routing with stplanr","text":"Routing services OpenStreetMap Routing Machine (OSRM) require input network, usually OSM. use osrm package: system terminal run following commands make OSRM docker image work . Now can routing R! single route:  find many routes via route() function, resulting something like figure .  Shut docker container.","code":"library(osrm) #> Data: (c) OpenStreetMap contributors, ODbL 1.0 - http://www.openstreetmap.org/copyright #> Routing: OSRM - http://project-osrm.org/ docker run -t -v \"${PWD}:/data\" osrm/osrm-backend osrm-extract -p /opt/car.lua /data/iow.pbf docker run -t -v \"${PWD}:/data\" osrm/osrm-backend osrm-partition /data/iow.osrm docker run -t -v \"${PWD}:/data\" osrm/osrm-backend osrm-customize /data/iow.osrm docker run -t -i -p 5000:5000 -v \"${PWD}:/data\" osrm/osrm-backend osrm-routed --algorithm mld /data/iow.osrm curl \"https://127.0.0.1:5000/route/v1/driving/13.388860,52.517037;13.385983,52.496891?steps=true\" l = pct::wight_lines_30 p = line2points(l) r = osrm::osrmRoute(src = p[1, ], dst = p[2, ], returnclass = \"sf\", overview = \"full\") plot(r) routes_osrm = route(l = l, route_fun = osrmRoute, returnclass = \"sf\", overview = \"full\") rnet_osrm = overline(routes_osrm, attrib = \"bicycle\") mapview::mapview(rnet_osrm, lwd = rnet_osrm$bicycle / 10) # tidy up f = list.files(pattern = \"iow\") unlink(x = f, recursive = TRUE) docker ps docker stop stupefied_hopper"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introducing stplanr","text":"purpose vignette get --speed basics provide useful links transport research R. stplanr initially developed answer practical question: convert official data travel behaviour geographic objects can plotted map analysed using methods geographical information systems (GIS)? Specifically, can origin-destination (OD) data, open datasets provided UK Data Services WICID portal (see wicid.ukdataservice.ac.uk/), used estimate cycling potential street levels city national levels? project initially developed support Propensity Cycle Tool (PCT), now deployed national web application hosted www.pct.bike written-academic paper (Lovelace et al. 2017). stplanr since grown include wide range functions transport planning. package reviewed rOpenSci package review process package now hosted site. See website docs.ropensci.org/stplanr. detailed overview package’s aims capabilities contained longer vignette, since published R Journal (Lovelace Ellison 2018).","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr.html","id":"installing-stplanr","dir":"Articles","previous_headings":"","what":"Installing stplanr","title":"Introducing stplanr","text":"’re new programming transport data, recommend using stplanr interactively Integrated Development Environment (IDE), RStudio. Broader guidance R set-can found Efficient R Programming (Gillespie Lovelace 2016), RStudio’s Education pages CRAN. R set-happy , latest version can installed follows: install development version, may new features, can installed follows: Load package follows: stplanr contains many datasets testing demonstrating R can used transport planning. names datasets (loaded ‘lazily’ namespace attach stplanr) listed : complete list functions package can found : https://docs.ropensci.org/stplanr/reference/index.html.","code":"install.packages(\"stplanr\") remotes::install_github(\"ropensci/stplanr\") library(stplanr) data(package = \"stplanr\")$result[, \"Item\"] ##  [1] \"cents_sf\"                   \"destinations_sf\"            ##  [3] \"flow\"                       \"flow_dests\"                 ##  [5] \"flowlines_sf\"               \"od_data_lines\"              ##  [7] \"od_data_routes\"             \"od_data_sample\"             ##  [9] \"osm_net_example\"            \"rnet_cycleway_intersection\" ## [11] \"rnet_overpass\"              \"rnet_roundabout\"            ## [13] \"route_network_sf\"           \"route_network_small\"        ## [15] \"routes_fast_sf\"             \"routes_slow_sf\"             ## [17] \"zones_sf\""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr.html","id":"od-data-to-desire-lines-and-routes","dir":"Articles","previous_headings":"","what":"OD data to desire lines and routes","title":"Introducing stplanr","text":"Transport data can take many forms. R appropriate language handling transport data, can read-data wide range formats, e.g. packages haven foreign. section focusses OD datasets, conversion desire lines routes foundational data types many transport research applications. (stplanr also contains functions : analysis road traffic casualty data, interfacing various routing APIs, ‘travel watershed’ analyis access Google’s Travel Matrix API.) Origin-destination (OD) data simply data following form: example OD table means 100 units ‘V1’ 3 units V2 travel zone 1 zone 2. also movement represented Zone 1 3. dataset can also represent ‘od matrix’, rows represent origins columns destinations. However, multiple variables (e.g. modes transport) prevent giant unwieldy sparse matrices, ‘long’ form represented much common. Now, imagine V1 represents total number people travelling origin destination V2 represents number regularly cycle. can get good indication people cycle desire line level. (Note: good source open OD data made available wicid.ukdataservice.ac.uk website). extract useful information OD dataset, need able place lines map. kind place desire line originate ? destination? environment like passes ? answer questions need geographic representation OD table illustrated .","code":"od_eg <- read.csv(   text =   \"origin, destination, V1, V2   1, 2, 100, 3   1, 3, 50, 5\" ) knitr::kable(od_eg)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr.html","id":"converting-od-data-to-desire-lines-with-r","dir":"Articles","previous_headings":"","what":"Converting OD data to desire lines with R","title":"Introducing stplanr","text":"One problem OD data rows tend geography inherently built . contain variables called lat_origin, lon_origin, lat_destination lon_destination. generally contain IDs geographic zones. Work needed convert OD data ‘desire lines’. Desire lines straight lines origin destination represent people go constrained route network (see Figure 3 (Lovelace et al. 2017)). show desire lines created, ’ll switch using real OD data provided stplanr. first three shown : shows , zone E02002361 E02002361 (.e. intrazonal flow) 109 people travelling work modes 2011 census. 2 cycled. equivalent numbers OD pair E02002361 E02002371 44 3. make data geographical? need another dataset, also provided stplanr: cents_sf dataset spatial, defined sf package. default plot() method sf objects creates map, illustrated :  stplanr creates desire lines using od2line() function, links geographical non-geographical datasets together. Note: functionality superseded functions od package. case, join non-geographical flow data geographical cents_sf data plotted . Let’s take single OD pair, E02002361 E02002371, fourth row represented table , see works: can plotted follows:  following command creates desire lines longer 2km distance via geo_length() function — omitting ‘internal flows’ via sel object — represented dataset flowlines: creates geographic data object l, can visualised follows: Now data set-, can change visual appearance desire lines single extra argument passed plotting function. Let’s make width depend total number people travelling along desire line:  Another useful visualisation involves setting colour relative number people cycling:  Finally, can convert desire lines routes follows (routing functions can used, may require API keys work - see cyclestreets package documentation example): routes contain information origin destination, additional spatial information route network. routes can plotted way desire lines plotted (use pre-made data ): next stage aggregate lines together create ‘route network’. , many functions, described stplanr-paper vignette.","code":"head(flow[c(1:3, 12)]) ##        Area.of.residence Area.of.workplace All Bicycle ## 920573         E02002361         E02002361 109       2 ## 920575         E02002361         E02002363  38       0 ## 920578         E02002361         E02002367  10       0 ## 920582         E02002361         E02002371  44       3 ## 920587         E02002361         E02002377  34       0 ## 920591         E02002361         E02002382   7       0 head(cents_sf) ##       geo_code  MSOA11NM percent_fem  avslope             geometry ## 1708 E02002384 Leeds 055    0.458721 2.856563 -1.546463, 53.809517 ## 1712 E02002382 Leeds 053    0.438144 2.284782 -1.511861, 53.811611 ## 1805 E02002393 Leeds 064    0.408759 2.361707 -1.524205, 53.804098 ## 1925 E02002367 Leeds 038    0.591141 5.091685 -1.550806, 53.824420 ## 1928 E02002363 Leeds 034    0.525161 3.076791 -1.535617, 53.828473 ## 1930 E02002361 Leeds 032    0.511777 3.589363 -1.516734, 53.828874 library(sf) ## Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE class(cents_sf) ## [1] \"sf\"         \"data.frame\" plot(cents_sf) flow_single_line <- od_data_sample[2:3, ] # select only the first line desire_line_single <- od2line(flow = flow_single_line, zones = cents_sf) plot(desire_line_single$geometry, lwd = 5) plot(cents_sf, add = TRUE, cex = 5) ## Warning in plot.sf(cents_sf, add = TRUE, cex = 5): ignoring all but the first ## attribute l <- od2line(flow = flow, zones = cents_sf) # identify 'intrazone flows' sel_intra <- l$Area.of.residence == l$Area.of.workplace # find distances l_distances <- geo_length(l) summary(l_distances) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##       0    1097    1466    1520    2285    2935 sel_dist <- l_distances > 2000 sel <- !sel_intra & sel_dist l <- l[sel, ] plot(l) lwd <- l$All / mean(l$All) plot(st_geometry(l), lwd = lwd) plot(l[\"Bicycle\"], lwd = lwd) # if the next line returns FALSE the code will not run r <- route(l = l, route_fun = cyclestreets::journey) r <- stplanr::routes_fast_sf plot(r$geometry, lwd = lwd * 3, reset = FALSE)"},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr.html","id":"motivations","dir":"Articles","previous_headings":"","what":"Motivations","title":"Introducing stplanr","text":"settlements worldwide grown become complex, process planning adapt. Planners today specialists, sub-fields Emergency, Logistics, Healthcare, Urban Transport Planning. ‘art’ planning become science, array specialist hardware software. Like types planning, new technologies changing many ways improving practice Transport Planning. Transport interventions new bridges, ports active travel routes longer decided based intuition public sector political authorities. Decisions now result long socio-technical process involving public consultation, cost-benefit analyses computer modeling visualisation. ongoing digital revolution, importance last stage grown, point transport planning now highly technical process, employing dozens software developers large planning organizations. now multi-billion pound global transport planning consultancy industry, support decision-making process. Yet results labor unavailable vast majority citizens worldwide. Transport planning decisions go best available evidence keep getting made. context aim stplanr provide accessible toolbox transport planning, focus geographic data. hoped useful practitioners researchers alike, part ongoing transition open source software taking place tech industry. motivation best available evidence suggests future civilization depends ability transition away fossil fuels. transport sector fastest growing source emissions sector, represents major roadblock path towards zero-carbon economy. Transport systems also major cause ill health, enabling sedentary lifestyles causing numerous road traffic casualties. Knowledge impacts motivated word ‘sustainable’ package’s name: focusing active travel public transport modes, stplanr intended encourage interventions reduce dependence fossil fuels.","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr.html","id":"further-resources","dir":"Articles","previous_headings":"","what":"Further resources","title":"Introducing stplanr","text":"stplanr focussed geographic data. reason almost transport data, spatial distribution bus stops routes pedestrians take home work, contains spatial element. Representing spatial data formal class system many advantages, including sensible defaults plotting spatial data map support range geographic operations. sf supports common geographic data formats used transport planning (including Shapefiles GeoJSON files representing points, lines, zones). See stplanr: package transport planning (Lovelace Ellison 2018) details. get best stplanr helps strong understanding spatial data R general. Chapter 2 open source book Geocomputation R provides introductory tutorial basics spatial data R contains references advanced tutorials may come handy spatial data analysis skills progress. information geographic data transport applications can found book. See https://r.geocompx.org/transport.html.","code":""},{"path":"https://docs.ropensci.org/stplanr/articles/stplanr.html","id":"contributing","dir":"Articles","previous_headings":"","what":"Contributing","title":"Introducing stplanr","text":"welcome contributions, whether ’s filing bug feature request issue tracker, putting pull request improve performance documentation, simply letting us know ’re using stplanr work citing dropping us email.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin Lovelace. Author, maintainer. Richard Ellison. Author. Malcolm Morgan. Author. Barry Rowlingson. Contributor. Nick Bearman. Contributor. Nikolai Berkoff. Contributor. Scott  Chamberlain. Reviewer.            Scott reviewed package rOpenSci, see https://github.com/ropensci/onboarding/issues/10 Mark Padgham. Contributor. Zhao Wang. Contributor. Andrea Gilardi. Contributor. Josiah Parry. Contributor.","code":""},{"path":"https://docs.ropensci.org/stplanr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Robin Lovelace, Richard Ellison (2018). “stplanr: Package Transport Planning.” R Journal, 10(2), 10. doi:10.32614/RJ-2018-053.","code":"@Article{,   author = {{Robin Lovelace} and {Richard Ellison}},   title = {stplanr: A Package for Transport Planning},   year = {2018},   volume = {10},   number = {2},   journal = {{The R Journal}},   pages = {10},   doi = {10.32614/RJ-2018-053}, }"},{"path":"https://docs.ropensci.org/stplanr/index.html","id":"stplanr-","dir":"","previous_headings":"","what":"Sustainable Transport Planning","title":"Sustainable Transport Planning","text":"stplanr package sustainable transport planning R. provides functions solving common problems transport planning modelling, best get point point B. overall aim provide reproducible, transparent accessible toolkit help people better understand transport systems inform policy, outlined paper package, potential open source software transport planning general, published R Journal. initial work project funded Department Transport (DfT) part development Propensity Cycle Tool (PCT), web application explore current travel patterns cycling potential zone, desire line, route route network levels (see www.pct.bike click region try ). basis methods underlying PCT origin-destination data, used highlight many short distance trips made, estimate many switch cycling. results help identify cycleways needed, important component sustainable transport planning infrastructure engineering policy design. See package vignette (e.g. via vignette(\"introducing-stplanr\")) academic paper Propensity Cycle Tool (PCT) information can used. README provides basics. Much work supports research undertaken Leeds’ Institute Transport Studies () stplanr useful transport researchers practitioners needing free, open reproducible methods working geographic data everywhere.","code":""},{"path":"https://docs.ropensci.org/stplanr/index.html","id":"key-functions","dir":"","previous_headings":"","what":"Key functions","title":"Sustainable Transport Planning","text":"Data frames representing flows origins destinations must combined geo-referenced zones points generate meaningful analyses visualisations ‘flows’ origin-destination (OD) data. stplanr facilitates od2line(), takes flow geographical data inputs outputs spatial data. example data provided package: Let’s take look data: datasets can combined follows:  stplanr many functions working OD data. See stplanr-od vignette details. package can also allocate flows road network, e.g. CycleStreets.net OpenStreetMap Routing Machine (OSRM) API interfaces. supported route_*() functions route_cyclestreets route_osrm(): Routing can done using range back-ends using lat/lon desire line inputs route() function, illustrated following commands calculates route Fleet Street Southwark Street River Thames Blackfriars Bridge London:  can also use place names, found using Google Map API:  can replicate call multiple times l argument route(): Next, ’ll calculate routes:  examples, example(\"route\"). overline() takes series route-allocated lines, splits unique segments aggregates values overlapping lines. can represent traffic transport system, demonstrated following code chunk. resulting route network, segment totals calculated overlapping parts routes walking, can visualised follows:  plot represents number walking trips made (‘flow’) along particular segments transport network.","code":"library(stplanr) od_data_sample[1:3, 1:3] # typical form of flow data #> # A tibble: 3 × 3 #>   geo_code1 geo_code2   all #>   <chr>     <chr>     <dbl> #> 1 E02002361 E02002361   109 #> 2 E02002361 E02002363    38 #> 3 E02002361 E02002367    10 cents_sf[1:3,] # points representing origins and destinations #>       geo_code  MSOA11NM percent_fem  avslope             geometry #> 1708 E02002384 Leeds 055    0.458721 2.856563 -1.546463, 53.809517 #> 1712 E02002382 Leeds 053    0.438144 2.284782 -1.511861, 53.811611 #> 1805 E02002393 Leeds 064    0.408759 2.361707 -1.524205, 53.804098 travel_network <- od2line(flow = od_data_sample, zones = cents_sf) w <- flow$all / max(flow$all) *10 plot(travel_network, lwd = w) library(osrm) #> Data: (c) OpenStreetMap contributors, ODbL 1.0 - http://www.openstreetmap.org/copyright #> Routing: OSRM - http://project-osrm.org/ trip <- route(   from = c(-0.11, 51.514),   to = c(-0.10, 51.506),   route_fun = osrmRoute,   returnclass = \"sf\"   ) #> Warning: \"returnclass\" is deprecated. #> Most common output is sf plot(trip) trip2 <- route(   from = \"Leeds\",   to = \"Bradford\",   route_fun = osrmRoute,   returnclass = \"sf\"   ) #> Warning: \"returnclass\" is deprecated. #> Most common output is sf plot(trip2) desire_lines <- travel_network[2:6, ] routes <- route(   l = desire_lines,   route_fun = osrmRoute,   returnclass = \"sf\"   ) #> Warning: \"returnclass\" is deprecated.  #> Warning: \"returnclass\" is deprecated.  #> Warning: \"returnclass\" is deprecated.  #> Warning: \"returnclass\" is deprecated.  #> Warning: \"returnclass\" is deprecated. plot(sf::st_geometry(routes)) plot(desire_lines, col = \"red\", add = TRUE) #> Warning in plot.sf(desire_lines, col = \"red\", add = TRUE): ignoring all but the #> first attribute routes$foot <- desire_lines$foot rnet <- overline(routes, attrib = \"foot\") plot(rnet[\"foot\"], lwd = rnet$foot)"},{"path":"https://docs.ropensci.org/stplanr/index.html","id":"policy-applications","dir":"","previous_headings":"","what":"Policy applications","title":"Sustainable Transport Planning","text":"examples shown , based tiny demonstration datasets, may seem particularly revolutionary. city scale, however, type analysis can used inform sustainable transport policies, described papers describing Propensity Cycle Tool (PCT), application calculate cycling school potential across England. Results generated stplanr now part national government policy: PCT recommended tool local regional authorities developing strategic cycle network Cycling Walking Infrastructure Strategy (CWIS), part Infrastructure Act 2015. stplanr helping dozens local authorities across UK answer question: prioritise investment cycling? essence, stplanr designed support sustainable transport policies. many research policy questions functions stplanr, open source software libraries packages, can help answer. time climate, health social crises, important technology sustainable (e.g. enabled open source communities licenses) contributes sustainable future.","code":""},{"path":"https://docs.ropensci.org/stplanr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sustainable Transport Planning","text":"install stable version, use: development version can installed using devtools:","code":"install.packages(\"stplanr\") # install.packages(\"devtools\") # if not already installed devtools::install_github(\"ropensci/stplanr\") library(stplanr)"},{"path":"https://docs.ropensci.org/stplanr/index.html","id":"installing-stplanr-on-linux-and-mac","dir":"","previous_headings":"Installation","what":"Installing stplanr on Linux and Mac","title":"Sustainable Transport Planning","text":"stplanr depends sf. Installation instructions Mac, Ubuntu Linux distros can found : https://github.com/r-spatial/sf#installing","code":""},{"path":"https://docs.ropensci.org/stplanr/index.html","id":"funtions-help-and-contributing","dir":"","previous_headings":"","what":"Funtions, help and contributing","title":"Sustainable Transport Planning","text":"current list available functions can seen package’s website docs.ropensci.org/stplanr/, following command: get internal help specific function, use standard way. contribute, report bugs request features, see issue tracker.","code":"lsf.str(\"package:stplanr\", all = TRUE) ?od2line"},{"path":"https://docs.ropensci.org/stplanr/index.html","id":"further-resources--tutorials","dir":"","previous_headings":"","what":"Further resources / tutorials","title":"Sustainable Transport Planning","text":"Want learn use open source software reproducible sustainable transport planning work? Now great time learn. Transport planning relatively new field application R. However, already good resources topic, including (suggestions: welcome): Transport chapter Geocomputation R, provides broad introduction geographic data perspective: https://r.geocompx.org/transport.html stplanr paper, describes context package developed: https://journal.r-project.org/archive/2018/RJ-2018-053/index.html (please cite use stplanr work) dodgr vignette, provides introduction routing R: https://github.com/UrbanAnalyst/dodgr","code":""},{"path":"https://docs.ropensci.org/stplanr/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Sustainable Transport Planning","text":"Please report issues, feature requests questions github issue tracker License: MIT Get citation information stplanr R citation(package = 'stplanr') project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/angle_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the angular difference between lines and a predefined bearing — angle_diff","title":"Calculate the angular difference between lines and a predefined bearing — angle_diff","text":"function designed find lines close parallel perpendicular pre-defined route. can return results absolute (contain information direction turn, .e. + - values clockwise/anticlockwise), bidirectional (mean values greater +/- 90 impossible).","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/angle_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the angular difference between lines and a predefined bearing — angle_diff","text":"","code":"angle_diff(l, angle, bidirectional = FALSE, absolute = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/angle_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the angular difference between lines and a predefined bearing — angle_diff","text":"l spatial lines object angle angle degrees relative North, 90 East -90 West. (direction rotation ignored). bidirectional result returned bidirectional format? Default FALSE. TRUE, line oposite direction bearing absolute TRUE (default) positive values can returned","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/angle_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the angular difference between lines and a predefined bearing — angle_diff","text":"Building convention used bearing() function geosphere package many applications, North definied 0, East 90 West -90.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/angle_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the angular difference between lines and a predefined bearing — angle_diff","text":"","code":"lib_versions <- sf::sf_extSoftVersion() lib_versions #>           GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H  #>       \"3.10.2\"        \"3.4.1\"        \"8.2.1\"         \"true\"         \"true\"  #>           PROJ  #>        \"8.2.1\"  # fails on some systems (with early versions of PROJ) if (lib_versions[3] >= \"6.3.1\") {   # Find all routes going North-South   lines_sf <- od2line(od_data_sample, zones = zones_sf)   angle_diff(lines_sf[2, ], angle = 0)   angle_diff(lines_sf[2:3, ], angle = 0) } #> Creating centroids representing desire line start and end points. #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE #> [1]  92.2313 105.0539"},{"path":"https://docs.ropensci.org/stplanr/reference/bbox_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a bounding box — bbox_scale","title":"Scale a bounding box — bbox_scale","text":"Takes bounding box input outputs bounding box different size, centred point.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/bbox_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a bounding box — bbox_scale","text":"","code":"bbox_scale(bb, scale_factor)"},{"path":"https://docs.ropensci.org/stplanr/reference/bbox_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a bounding box — bbox_scale","text":"bb Bounding box object scale_factor Numeric vector determining much bounding box grow shrink. Two numbers refer extending bounding box x y dimensions, respectively. value 1, output size input.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/bbox_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a bounding box — bbox_scale","text":"","code":"bb <- matrix(c(-1.55, 53.80, -1.50, 53.83), nrow = 2) bb1 <- bbox_scale(bb, scale_factor = 1.05) bb2 <- bbox_scale(bb, scale_factor = c(2, 1.05)) bb3 <- bbox_scale(bb, 0.1) plot(x = bb2[1, ], y = bb2[2, ]) points(bb1[1, ], bb1[2, ]) points(bb3[1, ], bb3[2, ]) points(bb[1, ], bb[2, ], col = \"red\")"},{"path":"https://docs.ropensci.org/stplanr/reference/bind_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Rapid row-binding of sf objects — bind_sf","title":"Rapid row-binding of sf objects — bind_sf","text":"Rapid row-binding sf objects","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/bind_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rapid row-binding of sf objects — bind_sf","text":"","code":"bind_sf(x)"},{"path":"https://docs.ropensci.org/stplanr/reference/bind_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rapid row-binding of sf objects — bind_sf","text":"x List sf objects combine","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/bind_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rapid row-binding of sf objects — bind_sf","text":"sf data frame","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/cents_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial points representing home locations — cents_sf","title":"Spatial points representing home locations — cents_sf","text":"points represent population-weighted centroids Medium Super Output Area (MSOA) zones within 1 mile radius home writing package.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/cents_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial points representing home locations — cents_sf","text":"spatial dataset 8 rows 5 columns","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/cents_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial points representing home locations — cents_sf","text":"geo_code official code zone MSOA11NM name zone name percent_fem percent female avslope average gradient zone Cents generated data repository pct-data: https://github.com/npct/pct-data. data accessed within pct repo: https://github.com/npct/pct, using following code:","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/cents_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial points representing home locations — cents_sf","text":"","code":"cents_sf #> Simple feature collection with 8 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.550806 ymin: 53.8041 xmax: -1.511861 ymax: 53.82887 #> Geodetic CRS:  WGS 84 #>       geo_code  MSOA11NM percent_fem  avslope                   geometry #> 1708 E02002384 Leeds 055    0.458721 2.856563 POINT (-1.546463 53.80952) #> 1712 E02002382 Leeds 053    0.438144 2.284782 POINT (-1.511861 53.81161) #> 1805 E02002393 Leeds 064    0.408759 2.361707  POINT (-1.524205 53.8041) #> 1925 E02002367 Leeds 038    0.591141 5.091685 POINT (-1.550806 53.82442) #> 1928 E02002363 Leeds 034    0.525161 3.076791 POINT (-1.535617 53.82847) #> 1930 E02002361 Leeds 032    0.511777 3.589363 POINT (-1.516734 53.82887) #> 2029 E02002377 Leeds 048    0.408293 2.762529  POINT (-1.519318 53.8158) #> 2034 E02002371 Leeds 042    0.504460 2.814496 POINT (-1.530712 53.81756)"},{"path":"https://docs.ropensci.org/stplanr/reference/destinations_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Example destinations data — destinations_sf","title":"Example destinations data — destinations_sf","text":"dataset represents trip destinations different geographic level origins stored object cents_sf.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/destinations_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example destinations data — destinations_sf","text":"spatial dataset 87 features","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/destinations_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example destinations data — destinations_sf","text":"","code":"destinations_sf #> Simple feature collection with 87 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.571298 ymin: 53.79647 xmax: -1.492713 ymax: 53.83734 #> Geodetic CRS:  WGS 84 #> First 10 features: #>         WZ11CD   LAD11CD COWZEW_SG                     COWZEW_SGN COWZEW_G #> 524  E33012352 E08000035         3                  Metro suburbs       3d #> 1936 E33010351 E08000035         2                       Top jobs       2c #> 2006 E33012331 E08000035         5 Manufacturing and distribution       5b #> 2712 E33012280 E08000035         3                  Metro suburbs       3a #> 2730 E33010390 E08000035         7            Servants of society       7c #> 2799 E33012310 E08000035         3                  Metro suburbs       3d #> 2996 E33012370 E08000035         3                  Metro suburbs       3a #> 3133 E33009663 E08000035         2                       Top jobs       2b #> 8057 E33013885 E08000035         3                  Metro suburbs       3d #> 8648 E33012279 E08000035         3                  Metro suburbs       3b #>                            COWZEW_GN                   geometry #> 524    Suburban metro infrastructure POINT (-1.492713 53.81042) #> 1936                   Big city life  POINT (-1.53781 53.80131) #> 2006                Industrial units POINT (-1.533468 53.80576) #> 2712    Metro surburban distribution POINT (-1.540438 53.81724) #> 2730                 Major hospitals POINT (-1.540901 53.80167) #> 2799   Suburban metro infrastructure POINT (-1.521311 53.81683) #> 2996    Metro surburban distribution POINT (-1.530386 53.80194) #> 3133           Adminstrative centres POINT (-1.532527 53.80963) #> 8057   Suburban metro infrastructure  POINT (-1.56543 53.81388) #> 8648 Cosmopolitan metro suburban mix POINT (-1.555112 53.82408)"},{"path":"https://docs.ropensci.org/stplanr/reference/flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of commuter flows — flow","title":"Data frame of commuter flows — flow","text":"dataset represents commuter flows (work travel) origin destination zones. data UK available open data: https://wicid.ukdataservice.ac.uk/.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/flow.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of commuter flows — flow","text":"data frame 49 rows 15 columns","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data frame of commuter flows — flow","text":"variables follows: Area..residence. id origin zone Area..workplace id destination zone . Travel work flows modes [,4:15]. Flows different modes id. unique id flow Although variable names unique UK data, data structure generalisable typical flow data source. key variables origin destination ids, link georeferenced spatial objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/flow_dests.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of invented\ncommuter flows with destinations in a different layer than the origins — flow_dests","title":"Data frame of invented\ncommuter flows with destinations in a different layer than the origins — flow_dests","text":"Data frame invented commuter flows destinations different layer origins","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/flow_dests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of invented\ncommuter flows with destinations in a different layer than the origins — flow_dests","text":"","code":"data(flow_dests)"},{"path":"https://docs.ropensci.org/stplanr/reference/flow_dests.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of invented\ncommuter flows with destinations in a different layer than the origins — flow_dests","text":"data frame 49 rows 15 columns","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/flow_dests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame of invented\ncommuter flows with destinations in a different layer than the origins — flow_dests","text":"","code":"if (FALSE) { # This is how the dataset was constructed flow_dests <- flow flow_dests$Area.of.workplace <- sample(x = destinations$WZ11CD, size = nrow(flow)) flow_dests <- dplyr::rename(flow_dests, WZ11CD = Area.of.workplace) devtools::use_data(flow_dests) }"},{"path":"https://docs.ropensci.org/stplanr/reference/flowlines_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial lines dataset of commuter flows — flowlines_sf","title":"Spatial lines dataset of commuter flows — flowlines_sf","text":"Flow data conversion spatial format..","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/flowlines_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial lines dataset of commuter flows — flowlines_sf","text":"spatial lines dataset 42 rows 15 columns","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/geo_bb.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible function to generate bounding boxes — geo_bb","title":"Flexible function to generate bounding boxes — geo_bb","text":"Takes geographic object bounding box input outputs bounding box, represented bounding box, corner points rectangular polygon.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_bb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible function to generate bounding boxes — geo_bb","text":"","code":"geo_bb(   shp,   scale_factor = 1,   distance = 0,   output = c(\"polygon\", \"points\", \"bb\") )"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_bb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible function to generate bounding boxes — geo_bb","text":"shp Spatial object scale_factor Numeric vector determining much bounding box grow shrink. Two numbers refer extending bounding box x y dimensions, respectively. value 1, output size input. distance Distance metres extend bounding box output Type object returned (polygon default)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/geo_bb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible function to generate bounding boxes — geo_bb","text":"","code":"shp <- routes_fast_sf shp_bb <- geo_bb(shp, distance = 100) plot(shp_bb, col = \"red\", reset = FALSE) plot(geo_bb(routes_fast_sf, scale_factor = 0.8), col = \"green\", add = TRUE) plot(routes_fast_sf$geometry, add = TRUE)  geo_bb(shp, output = \"point\") #> Geometry set for 4 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.550964 ymin: 53.80248 xmax: -1.510987 ymax: 53.83041 #> Geodetic CRS:  WGS 84 #> POINT (-1.550964 53.80248) #> POINT (-1.510987 53.80248) #> POINT (-1.510987 53.83041) #> POINT (-1.550964 53.83041)"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_bb_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create matrix representing the spatial bounds of an object — geo_bb_matrix","title":"Create matrix representing the spatial bounds of an object — geo_bb_matrix","text":"Converts range spatial data formats matrix representing bounding box","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_bb_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create matrix representing the spatial bounds of an object — geo_bb_matrix","text":"","code":"geo_bb_matrix(shp)"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_bb_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create matrix representing the spatial bounds of an object — geo_bb_matrix","text":"shp Spatial object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/geo_bb_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create matrix representing the spatial bounds of an object — geo_bb_matrix","text":"","code":"geo_bb_matrix(routes_fast_sf) #>           [,1]      [,2] #> [1,] -1.550964 -1.510987 #> [2,] 53.802478 53.830414 geo_bb_matrix(cents_sf[1, ]) #>           [,1]      [,2] #> [1,] -1.546463 -1.546463 #> [2,] 53.809517 53.809517 geo_bb_matrix(c(-2, 54)) #>      [,1] [,2] #> [1,]   -2   -2 #> [2,]   54   54 geo_bb_matrix(sf::st_coordinates(cents_sf)) #>           [,1]      [,2] #> [1,] -1.550806 -1.511861 #> [2,] 53.804098 53.828874"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a buffer operation on a temporary projected CRS — geo_buffer","title":"Perform a buffer operation on a temporary projected CRS — geo_buffer","text":"function solves problem buffers circular used non-projected data.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a buffer operation on a temporary projected CRS — geo_buffer","text":"","code":"geo_buffer(shp, dist = NULL, width = NULL, ...)"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a buffer operation on a temporary projected CRS — geo_buffer","text":"shp spatial object geographic CRS (e.g. WGS84) around buffer drawn dist distance (metres) buffer (buffering simple features) width distance (metres) buffer (buffering sp objects) ... Arguments passed buffer (see ?sf::st_buffer details)","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_buffer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a buffer operation on a temporary projected CRS — geo_buffer","text":"Requires recent version PROJ (>= 6.3.0). Buffers sf objects geographic (lon/lat) coordinates can also done s2 package.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/geo_buffer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a buffer operation on a temporary projected CRS — geo_buffer","text":"","code":"lib_versions <- sf::sf_extSoftVersion() lib_versions #>           GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H  #>       \"3.10.2\"        \"3.4.1\"        \"8.2.1\"         \"true\"         \"true\"  #>           PROJ  #>        \"8.2.1\"  if (lib_versions[3] >= \"6.3.1\") {   buff_sf <- geo_buffer(routes_fast_sf, dist = 50)   plot(buff_sf$geometry)   geo_buffer(routes_fast_sf$geometry, dist = 50) }  #> Geometry set for 42 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -1.551723 ymin: 53.80203 xmax: -1.510228 ymax: 53.83086 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((-1.535569 53.82873, -1.535517 53.8287... #> POLYGON ((-1.550723 53.82451, -1.550871 53.8248... #> POLYGON ((-1.530548 53.81706, -1.530586 53.8170... #> POLYGON ((-1.518697 53.81731, -1.51892 53.81742... #> POLYGON ((-1.516744 53.82823, -1.51678 53.82823..."},{"path":"https://docs.ropensci.org/stplanr/reference/geo_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert text strings into points on the map — geo_code","title":"Convert text strings into points on the map — geo_code","text":"Generate lat/long pair data using Google's geolocation API.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert text strings into points on the map — geo_code","text":"","code":"geo_code(   address,   service = \"nominatim\",   base_url = \"https://maps.google.com/maps/api/geocode/json\",   return_all = FALSE,   pat = NULL )"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert text strings into points on the map — geo_code","text":"address Text string representing address want geocode service service use? Nominatim default base_url base url query return_all request return information returned Google Maps? default FALSE: return two numbers: longitude latitude, order pat Personal access token","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert text strings into points on the map — geo_code","text":"","code":"if (FALSE) { geo_code(address = \"Hereford\") geo_code(\"LS7 3HB\") geo_code(\"hereford\", return_all = TRUE) # needs api key in .Renviron geo_code(\"hereford\", service = \"google\", pat = Sys.getenv(\"GOOGLE\"), return_all = TRUE) }"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate line length of line with geographic or projected CRS — geo_length","title":"Calculate line length of line with geographic or projected CRS — geo_length","text":"Takes line (represented sf sp classes) returns numeric value representing distance meters.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate line length of line with geographic or projected CRS — geo_length","text":"","code":"geo_length(shp)"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate line length of line with geographic or projected CRS — geo_length","text":"shp spatial line object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/geo_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate line length of line with geographic or projected CRS — geo_length","text":"","code":"lib_versions <- sf::sf_extSoftVersion() lib_versions #>           GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H  #>       \"3.10.2\"        \"3.4.1\"        \"8.2.1\"         \"true\"         \"true\"  #>           PROJ  #>        \"8.2.1\"  if (lib_versions[3] >= \"6.3.1\") {   geo_length(routes_fast_sf) } #>  [1] 1538.8810 2990.7783 2297.5929 1870.2117 2239.1301 3352.8345 1538.8810 #>  [8] 1580.7084 1506.1390 2483.2391 3156.1339 3877.7765 2992.2337 1708.4876 #> [15] 2121.8359 3098.9361 3768.5096 3711.6150 2366.0647 1506.1390 2078.5604 #> [22]  977.1004 1646.6739 2371.6377 1875.7200 2483.2391 3055.6605  977.1004 #> [29]  872.9039 1727.9827 2239.4037 3085.7290 3725.2340 1646.6739  872.9039 #> [36] 1303.2590 3285.0306 3829.5751 3868.1338 2323.4363 1727.9827 1303.2590"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_projected.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform GIS functions on a temporary, projected version of a spatial object — geo_projected","title":"Perform GIS functions on a temporary, projected version of a spatial object — geo_projected","text":"function performs operations projected data.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_projected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform GIS functions on a temporary, projected version of a spatial object — geo_projected","text":"","code":"geo_projected(shp, fun, crs, silent, ...)"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_projected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform GIS functions on a temporary, projected version of a spatial object — geo_projected","text":"shp spatial object geographic (WGS84) coordinate system fun function perform projected object (e.g. sf package) crs optional coordinate reference system (provided set automatically geo_select_aeq()) silent binary value printing CRS details (default: TRUE) ... Arguments pass fun","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/geo_projected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform GIS functions on a temporary, projected version of a spatial object — geo_projected","text":"","code":"lib_versions <- sf::sf_extSoftVersion() lib_versions #>           GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H  #>       \"3.10.2\"        \"3.4.1\"        \"8.2.1\"         \"true\"         \"true\"  #>           PROJ  #>        \"8.2.1\"  # fails on some systems (with early versions of PROJ) if (lib_versions[3] >= \"6.3.1\") {   shp <- routes_fast_sf[2:4, ]   geo_projected(shp, sf::st_buffer, dist = 100) } #> Simple feature collection with 3 features and 16 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -1.552483 ymin: 53.81487 xmax: -1.511078 ymax: 53.83131 #> Geodetic CRS:  WGS 84 #>   plan start finish length time waypoint cum_hill change_elev dif_max_min #> 3    1     1      1   2976  829       97      112          -4          39 #> 4    1     1      1   2290  502       37      103         -45          65 #> 5    1     1      1   1866  313       41       89         -61          65 #>   up_tot down_tot av_incline co2_saving calories busyness ID #> 3     54       58 0.03763441        555       78     7062  3 #> 4     29       74 0.04497817        427       38     3380  4 #> 5     14       75 0.04769561        348       20     2259  5 #>                         geometry #> 3 POLYGON ((-1.551653 53.8248... #> 4 POLYGON ((-1.530458 53.8166... #> 5 POLYGON ((-1.519689 53.8172..."},{"path":"https://docs.ropensci.org/stplanr/reference/geo_select_aeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a custom projected CRS for the area of interest — geo_select_aeq","title":"Select a custom projected CRS for the area of interest — geo_select_aeq","text":"function takes spatial object geographic (WGS84) CRS returns custom projected CRS focussed centroid object. function especially useful using units metres directions data collected anywhere world.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_select_aeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a custom projected CRS for the area of interest — geo_select_aeq","text":"","code":"geo_select_aeq(shp)"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_select_aeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a custom projected CRS for the area of interest — geo_select_aeq","text":"shp spatial object geographic (WGS84) coordinate system","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_select_aeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select a custom projected CRS for the area of interest — geo_select_aeq","text":"function based stackexchange answer: https://gis.stackexchange.com/questions/121489","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/geo_select_aeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a custom projected CRS for the area of interest — geo_select_aeq","text":"","code":"shp <- zones_sf geo_select_aeq(shp) #> Coordinate Reference System: #>   User input: +proj=aeqd +lat_0=53.8183052800959 +lon_0=-1.53014431833907 +x_0=0 +y_0=0  #>   wkt: #> PROJCRS[\"unknown\", #>     BASEGEOGCRS[\"unknown\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ID[\"EPSG\",6326]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8901]]], #>     CONVERSION[\"unknown\", #>         METHOD[\"Modified Azimuthal Equidistant\", #>             ID[\"EPSG\",9832]], #>         PARAMETER[\"Latitude of natural origin\",53.8183052800959, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-1.53014431833907, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]]]"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_toptail.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip the first and last n metres of SpatialLines — geo_toptail","title":"Clip the first and last n metres of SpatialLines — geo_toptail","text":"Takes lines removes start end point, distance determined user.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_toptail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip the first and last n metres of SpatialLines — geo_toptail","text":"","code":"geo_toptail(l, toptail_dist, ...)"},{"path":"https://docs.ropensci.org/stplanr/reference/geo_toptail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip the first and last n metres of SpatialLines — geo_toptail","text":"l sf object representing lines toptail_dist distance (metres) top tail line . Can either single value vector length SpatialLines object. ... Arguments passed sf::st_buffer()","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/geo_toptail.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clip the first and last n metres of SpatialLines — geo_toptail","text":"Note: see function toptailgs() stplanr v0.8.5 implementation uses geosphere package.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/geo_toptail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip the first and last n metres of SpatialLines — geo_toptail","text":"","code":"lib_versions <- sf::sf_extSoftVersion() lib_versions #>           GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H  #>       \"3.10.2\"        \"3.4.1\"        \"8.2.1\"         \"true\"         \"true\"  #>           PROJ  #>        \"8.2.1\"  # dont test due to issues with sp classes on some set-ups if (lib_versions[3] >= \"6.3.1\") {   l <- routes_fast_sf[2:4, ]   l_top_tail <- geo_toptail(l, 300)   l_top_tail   plot(sf::st_geometry(l_top_tail))   plot(sf::st_geometry(geo_toptail(l, 600)), lwd = 9, add = TRUE) }"},{"path":"https://docs.ropensci.org/stplanr/reference/gsection.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to split overlapping SpatialLines into segments — gsection","title":"Function to split overlapping SpatialLines into segments — gsection","text":"Divides SpatialLinesDataFrame objects separate Lines. new Lines object aggregate single number aggregated lines.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/gsection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to split overlapping SpatialLines into segments — gsection","text":"","code":"gsection(sl, buff_dist = 0)"},{"path":"https://docs.ropensci.org/stplanr/reference/gsection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to split overlapping SpatialLines into segments — gsection","text":"sl SpatialLinesDataFrame overlapping Lines split number overlapping features. buff_dist number specifying distance meters buffer used crop lines running operation. distance zero (default) touching non-overlapping lines may aggregated.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/gsection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to split overlapping SpatialLines into segments — gsection","text":"","code":"lib_versions <- sf::sf_extSoftVersion() lib_versions #>           GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H  #>       \"3.10.2\"        \"3.4.1\"        \"8.2.1\"         \"true\"         \"true\"  #>           PROJ  #>        \"8.2.1\"  # fails on some systems (with early versions of PROJ) if (lib_versions[3] >= \"6.3.1\") {   sl <- routes_fast_sf[2:4, ]   rsec <- gsection(sl)   length(rsec) # sections   plot(rsec, col = seq(length(rsec)))   rsec <- gsection(sl, buff_dist = 50)   length(rsec) # 4 features: issue   plot(rsec, col = seq(length(rsec))) }"},{"path":"https://docs.ropensci.org/stplanr/reference/is_linepoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify lines that are points — is_linepoint","title":"Identify lines that are points — is_linepoint","text":"OD matrices often contain 'intrazonal' flows, origin point destination. function can help identify intrazonal OD pairs, using 2 criteria: total number vertices (2 fewer) whether origin destination .","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/is_linepoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify lines that are points — is_linepoint","text":"","code":"is_linepoint(l)"},{"path":"https://docs.ropensci.org/stplanr/reference/is_linepoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify lines that are points — is_linepoint","text":"l spatial lines object","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/is_linepoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify lines that are points — is_linepoint","text":"Returns boolean vector. TRUE means associated line fact point (distance). can useful removing data plotted.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/is_linepoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify lines that are points — is_linepoint","text":"","code":"islp <- is_linepoint(flowlines_sf) nrow(flowlines_sf) #> [1] 42 sum(islp) #> [1] 0 # Remove invisible 'linepoints' nrow(flowlines_sf[!islp, ]) #> [1] 42"},{"path":"https://docs.ropensci.org/stplanr/reference/islines.html","id":null,"dir":"Reference","previous_headings":"","what":"Do the intersections between two geometries create lines? — islines","title":"Do the intersections between two geometries create lines? — islines","text":"function required overline(). identifies whether sets lines overlap (beyond shared points) .","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/islines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do the intersections between two geometries create lines? — islines","text":"","code":"islines(g1, g2)"},{"path":"https://docs.ropensci.org/stplanr/reference/islines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do the intersections between two geometries create lines? — islines","text":"g1 spatial object g2 spatial object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/islines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do the intersections between two geometries create lines? — islines","text":"","code":"if (FALSE) { # sf implementation islines(routes_fast_sf[2, ], routes_fast_sf[3, ]) islines(routes_fast_sf[2, ], routes_fast_sf[22, ]) }"},{"path":"https://docs.ropensci.org/stplanr/reference/line2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert geographic line objects to a data.frame with from and to coords — line2df","title":"Convert geographic line objects to a data.frame with from and to coords — line2df","text":"function returns data frame fx fy tx ty variables representing beginning end points spatial line features respectively.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert geographic line objects to a data.frame with from and to coords — line2df","text":"","code":"line2df(l)"},{"path":"https://docs.ropensci.org/stplanr/reference/line2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert geographic line objects to a data.frame with from and to coords — line2df","text":"l spatial lines object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/line2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert geographic line objects to a data.frame with from and to coords — line2df","text":"","code":"line2df(routes_fast_sf[5:6, ]) # beginning and end of routes #> # A tibble: 2 × 5 #>      L1    fx    fy    tx    ty #>   <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     1 -1.52  53.8 -1.51  53.8 #> 2     2 -1.52  53.8 -1.52  53.8"},{"path":"https://docs.ropensci.org/stplanr/reference/line2points.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a spatial (linestring) object to points — line2points","title":"Convert a spatial (linestring) object to points — line2points","text":"number points double number lines line2points. closely related function, line2pointsn returns points line vertices. points corresponding given line, , (2*):((2*)+1). last function, line2vertices, returns points vertices nodes. input l object composed 1 LINESTRING 2 POINTS, returns empty sf object.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line2points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a spatial (linestring) object to points — line2points","text":"","code":"line2points(l, ids = rep(1:nrow(l)))  line2pointsn(l)  line2vertices(l)"},{"path":"https://docs.ropensci.org/stplanr/reference/line2points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a spatial (linestring) object to points — line2points","text":"l sf object SpatialLinesDataFrame older sp package ids Vector ids (default 1:nrow(l))","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/line2points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a spatial (linestring) object to points — line2points","text":"","code":"l <- routes_fast_sf[2, ] lpoints <- line2points(l) plot(l$geometry) plot(lpoints, add = TRUE)  # test all vertices: plot(l$geometry) lpoints2 <- line2pointsn(l) plot(lpoints2$geometry, add = TRUE)   # extract only internal vertices l_internal_vertices <- line2vertices(l) plot(sf::st_geometry(l), reset = FALSE) plot(l_internal_vertices, add = TRUE)  # The boundary points are missing"},{"path":"https://docs.ropensci.org/stplanr/reference/line_bearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the bearing of straight lines — line_bearing","title":"Find the bearing of straight lines — line_bearing","text":"function returns bearing (degrees relative north) lines.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_bearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the bearing of straight lines — line_bearing","text":"","code":"line_bearing(l, bidirectional = FALSE)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_bearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the bearing of straight lines — line_bearing","text":"l spatial lines object bidirectional result returned bidirectional format? Default FALSE. TRUE, line oposite direction bearing","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_bearing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the bearing of straight lines — line_bearing","text":"Returns boolean vector. TRUE means associated line fact point (distance). can useful removing data plotted.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/line_bearing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the bearing of straight lines — line_bearing","text":"","code":"l <- flowlines_sf[1:5, ] bearings_sf_1_9 <- line_bearing(l) bearings_sf_1_9 # lines of 0 length have NaN bearing #> [1]  -92.04942 -102.44566 -143.83660 -173.33154  170.51696 b <- line_bearing(l, bidirectional = TRUE) r <- routes_fast_sf[1:5, ] b2 <- line_bearing(r, bidirectional = TRUE) plot(b, b2)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_breakup.html","id":null,"dir":"Reference","previous_headings":"","what":"Break up line objects into shorter segments — line_breakup","title":"Break up line objects into shorter segments — line_breakup","text":"function breaks LINESTRING geometries smaller pieces.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_breakup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break up line objects into shorter segments — line_breakup","text":"","code":"line_breakup(l, z)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_breakup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break up line objects into shorter segments — line_breakup","text":"l sf object LINESTRING geometry z sf object POLYGON geometry number representing resolution grid cells used break linestring objects","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_breakup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break up line objects into shorter segments — line_breakup","text":"sf object LINESTRING geometry created breaking input object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/line_breakup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break up line objects into shorter segments — line_breakup","text":"","code":"library(sf) z <- zones_sf$geometry l <- routes_fast_sf$geometry[2] l_split <- line_breakup(l, z) l #> Geometry set for 1 feature  #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.550964 ymin: 53.82387 xmax: -1.516748 ymax: 53.83041 #> Geodetic CRS:  WGS 84 #> LINESTRING (-1.516748 53.82868, -1.517513 53.82... l_split #> Geometry set for 3 features  #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.550964 ymin: 53.82387 xmax: -1.516748 ymax: 53.83041 #> Geodetic CRS:  WGS 84 #> LINESTRING (-1.516748 53.82868, -1.517513 53.82... #> LINESTRING (-1.526629 53.82927, -1.526957 53.82... #> LINESTRING (-1.545996 53.82493, -1.546004 53.82... sf::st_length(l) #> 2982.689 [m] sum(sf::st_length(l_split)) #> 2982.689 [m] plot(z) plot(l, add = TRUE, lwd = 9, col = \"grey\") plot(l_split, add = TRUE, col = 1:length(l_split))"},{"path":"https://docs.ropensci.org/stplanr/reference/line_cast.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert multilinestring object into linestrings — line_cast","title":"Convert multilinestring object into linestrings — line_cast","text":"Without losing vertices","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_cast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert multilinestring object into linestrings — line_cast","text":"","code":"line_cast(x)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_cast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert multilinestring object into linestrings — line_cast","text":"x Linestring object","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_midpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the mid-point of lines — line_midpoint","title":"Find the mid-point of lines — line_midpoint","text":"Find mid-point lines","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_midpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the mid-point of lines — line_midpoint","text":"","code":"line_midpoint(l, tolerance = NULL)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_midpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the mid-point of lines — line_midpoint","text":"l spatial lines object tolerance tolerance used break lines verteces. See lwgeom::st_linesubstring().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/line_midpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the mid-point of lines — line_midpoint","text":"","code":"l <- routes_fast_sf[2:5, ] plot(l$geometry, col = 2:5) midpoints <- line_midpoint(l) #> Warning: st_linesubstring does not follow a geodesic; you may want to use st_geod_segmentize first #> Warning: st_linesubstring does not follow a geodesic; you may want to use st_geod_segmentize first plot(midpoints, add = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide an sf object with LINESTRING geometry into regular segments — line_segment","title":"Divide an sf object with LINESTRING geometry into regular segments — line_segment","text":"function keeps attributes. Note: results differ use_rsgeo TRUE: {rsgeo} implementation faster reliably keeps returned linestrings segment_length value.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide an sf object with LINESTRING geometry into regular segments — line_segment","text":"","code":"line_segment(l, segment_length = NA, use_rsgeo = NULL, debug_mode = FALSE)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide an sf object with LINESTRING geometry into regular segments — line_segment","text":"l spatial lines object segment_length approximate length segments output (overides n_segments set) use_rsgeo rsgeo package used? rsgeo available, faster implementation used default. rsgeo available, lwgeom package used. debug_mode debug messages printed? Default FALSE.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/line_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide an sf object with LINESTRING geometry into regular segments — line_segment","text":"","code":"library(sf) l <- routes_fast_sf[2:4, ] l_seg_multi <- line_segment(l, segment_length = 1000, use_rsgeo = FALSE) plot(l_seg_multi, col = seq_along(l_seg_multi), lwd = 5) #> Warning: plotting the first 9 out of 16 attributes; use max.plot = 16 to plot all #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette #> Warning: col is not of length 1 or nrow(x): colors will be recycled; use pal to specify a color palette  round(st_length(l_seg_multi)) #> Units: [m] #> [1] 1013 1014  955 1294  998  986  881 # Test rsgeo implementation: # rsmulti = line_segment(l, segment_length = 1000, use_rsgeo = TRUE) # plot(rsmulti, col = seq_along(l_seg_multi), lwd = 5) # round(st_length(rsmulti)) # waldo::compare(l_seg_multi, rsmulti)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_segment1.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment a single line, using lwgeom or rsgeo — line_segment1","title":"Segment a single line, using lwgeom or rsgeo — line_segment1","text":"Segment single line, using lwgeom rsgeo","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_segment1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment a single line, using lwgeom or rsgeo — line_segment1","text":"","code":"line_segment1(l, n_segments = NA, segment_length = NA)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_segment1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment a single line, using lwgeom or rsgeo — line_segment1","text":"l spatial lines object n_segments number segments divide line segment_length approximate length segments output (overides n_segments set)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/line_segment1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment a single line, using lwgeom or rsgeo — line_segment1","text":"","code":"l <- routes_fast_sf[2, ] l_seg2 <- line_segment1(l = l, n_segments = 2) # Test with rsgeo (must be installed): # l_seg2_rsgeo = line_segment1(l = l, n_segments = 2) # waldo::compare(l_seg2, l_seg2_rsgeo) l_seg3 <- line_segment1(l = l, n_segments = 3) l_seg_100 <- line_segment1(l = l, segment_length = 100) l_seg_1000 <- line_segment1(l = l, segment_length = 1000) plot(sf::st_geometry(l_seg2), col = 1:2, lwd = 5)  plot(sf::st_geometry(l_seg3), col = 1:3, lwd = 5)  plot(sf::st_geometry(l_seg_100), col = seq(nrow(l_seg_100)), lwd = 5)  plot(sf::st_geometry(l_seg_1000), col = seq(nrow(l_seg_1000)), lwd = 5)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_via.html","id":null,"dir":"Reference","previous_headings":"","what":"Add geometry columns representing a route via intermediary points — line_via","title":"Add geometry columns representing a route via intermediary points — line_via","text":"Takes origin () destination (B), represented linestring l, generates 3 extra geometries based points p:","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_via.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add geometry columns representing a route via intermediary points — line_via","text":"","code":"line_via(l, p)"},{"path":"https://docs.ropensci.org/stplanr/reference/line_via.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add geometry columns representing a route via intermediary points — line_via","text":"l spatial lines object p spatial points object","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/line_via.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add geometry columns representing a route via intermediary points — line_via","text":"P1 (P1 nearest point ) P1 P2 (P2 nearest point B) P2 B","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/line_via.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add geometry columns representing a route via intermediary points — line_via","text":"","code":"library(sf) l <- flowlines_sf[2:4, ] p <- destinations_sf lv <- line_via(l, p) lv #> Simple feature collection with 3 features and 15 fields #> Active geometry column: geometry #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.550807 ymin: 53.8158 xmax: -1.516734 ymax: 53.82887 #> Geodetic CRS:  WGS 84 #>        Area.of.residence Area.of.workplace All Work.mainly.at.or.from.home #> 920578         E02002361         E02002367  10                           0 #> 920582         E02002361         E02002371  44                           0 #> 920587         E02002361         E02002377  34                           0 #>        Underground..metro..light.rail..tram Train Bus..minibus.or.coach Taxi #> 920578                                    0     0                     1    0 #> 920582                                    0     0                     2    2 #> 920587                                    0     0                     0    1 #>        Motorcycle..scooter.or.moped Driving.a.car.or.van #> 920578                            0                    8 #> 920582                            0                   28 #> 920587                            2                   19 #>        Passenger.in.a.car.or.van Bicycle On.foot Other.method.of.travel.to.work #> 920578                         0       0       1                              0 #> 920582                         3       3       6                              0 #> 920587                         3       0       9                              0 #>                         id                       geometry #> 920578 E02002361 E02002367 LINESTRING (-1.516734 53.82... #> 920582 E02002361 E02002371 LINESTRING (-1.516734 53.82... #> 920587 E02002361 E02002377 LINESTRING (-1.516734 53.82... #>                              leg_orig                        leg_via #> 920578 LINESTRING (-1.516734 53.82... LINESTRING (-1.517333 53.82... #> 920582 LINESTRING (-1.516734 53.82... LINESTRING (-1.517333 53.82... #> 920587 LINESTRING (-1.516734 53.82... LINESTRING (-1.517333 53.82... #>                              leg_dest #> 920578 LINESTRING (-1.555112 53.82... #> 920582 LINESTRING (-1.534205 53.81... #> 920587 LINESTRING (-1.521311 53.81... # library(mapview) # mapview(lv) + #    mapview(lv$leg_orig, col = \"red\") plot(lv[3], lwd = 9, reset = FALSE) plot(lv$leg_orig, col = \"red\", lwd = 5, add = TRUE) plot(lv$leg_via, col = \"black\", add = TRUE) plot(lv$leg_dest, col = \"green\", lwd = 5, add = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/mats2line.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 2 matrices to lines — mats2line","title":"Convert 2 matrices to lines — mats2line","text":"Convert 2 matrices lines","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/mats2line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 2 matrices to lines — mats2line","text":"","code":"mats2line(mat1, mat2, crs = NA)"},{"path":"https://docs.ropensci.org/stplanr/reference/mats2line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 2 matrices to lines — mats2line","text":"mat1 Matrix representing origins mat2 Matrix representing destinations crs Number representing coordinate system data, e.g. 4326","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/mats2line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert 2 matrices to lines — mats2line","text":"","code":"m1 <- matrix(c(1, 2, 1, 2), ncol = 2) m2 <- matrix(c(9, 9, 9, 1), ncol = 2) l <- mats2line(m1, m2) class(l) #> [1] \"sfc_LINESTRING\" \"sfc\"            l #> Geometry set for 2 features  #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 9 ymax: 9 #> CRS:           NA #> LINESTRING (1 1, 9 9) #> LINESTRING (2 2, 9 1) lsf <- sf::st_sf(l, crs = 4326) class(lsf) #> [1] \"sf\"         \"data.frame\" plot(lsf)  # mapview::mapview(lsf)"},{"path":"https://docs.ropensci.org/stplanr/reference/n_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorised function to calculate number of segments given a max segment length — n_segments","title":"Vectorised function to calculate number of segments given a max segment length — n_segments","text":"Vectorised function calculate number segments given max segment length","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/n_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorised function to calculate number of segments given a max segment length — n_segments","text":"","code":"n_segments(line_length, max_segment_length)"},{"path":"https://docs.ropensci.org/stplanr/reference/n_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorised function to calculate number of segments given a max segment length — n_segments","text":"line_length length line max_segment_length maximum length segment","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/n_segments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorised function to calculate number of segments given a max segment length — n_segments","text":"","code":"n_segments(50, 10) #> [1] 5 n_segments(50.1, 10) #> [1] 6 n_segments(1, 10) #> [1] 1 n_segments(1:9, 2) #> [1] 1 1 2 2 3 3 4 4 5"},{"path":"https://docs.ropensci.org/stplanr/reference/n_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the number of vertices in sf objects — n_vertices","title":"Retrieve the number of vertices in sf objects — n_vertices","text":"Returns vector length number sf objects.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/n_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the number of vertices in sf objects — n_vertices","text":"","code":"n_vertices(l)"},{"path":"https://docs.ropensci.org/stplanr/reference/n_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the number of vertices in sf objects — n_vertices","text":"l sf object LINESTRING geometry","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/n_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the number of vertices in sf objects — n_vertices","text":"","code":"l <- routes_fast_sf n_vertices(l) #>  [1]  53  97  37  41  73 104  53  44  59  79  97 121  98  65  64  84 114 131  44 #> [20]  59  55  22  52  64  46  79  75  22  27  65  70  87 105  52  27  46 114 126 #> [39] 130  69  65  46 n_vertices(zones_sf) #> [1] 6 8 8 9 7 6 8 7"},{"path":"https://docs.ropensci.org/stplanr/reference/od2line.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert origin-destination data to spatial lines — od2line","title":"Convert origin-destination data to spatial lines — od2line","text":"Origin-destination ('OD') flow data often provided form 1 line per flow zone codes origin destination centroids. can tricky plot link-geographical data. function makes task easier.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od2line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert origin-destination data to spatial lines — od2line","text":"","code":"od2line(   flow,   zones,   destinations = NULL,   zone_code = names(zones)[1],   origin_code = names(flow)[1],   dest_code = names(flow)[2],   zone_code_d = NA,   silent = FALSE )"},{"path":"https://docs.ropensci.org/stplanr/reference/od2line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert origin-destination data to spatial lines — od2line","text":"flow data frame representing origin-destination data. first two columns data frame correspond first column data zones. Thus cents_sf(), first column geo_code. corresponds first two columns flow(). zones spatial object representing origins (destinations separate destinations object provided) travel. destinations spatial object representing destinations travel flows. zone_code Name variable zones containing ids zone. default first column names zones. origin_code Name variable flow containing ids zone origin. default first column name flow input dataset. dest_code Name variable flow containing ids zone destination. default second column name flow input dataset first column name destinations set. zone_code_d Name variable destinations containing ids zone. default first column names destinations. silent TRUE default, setting TRUE show matching columns","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od2line.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert origin-destination data to spatial lines — od2line","text":"Origin-destination (OD) data often provided form 1 line per OD pair, zone codes trip origin first column zone codes destination second column (see vignette(\"stplanr-od\")) details. od2line() creates spatial (linestring) object representing movement origin destination OD pair. takes data frame containing origin destination cones (flow) match first column spatial (polygon point) object (zones).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od2line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert origin-destination data to spatial lines — od2line","text":"","code":"od_data <- stplanr::flow[1:20, ] l <- od2line(flow = od_data, zones = cents_sf) plot(sf::st_geometry(cents_sf)) plot(l, lwd = l$All / mean(l$All), add = TRUE) #> Warning: ignoring all but the first attribute"},{"path":"https://docs.ropensci.org/stplanr/reference/od2odf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coordinates from OD data — od2odf","title":"Extract coordinates from OD data — od2odf","text":"Extract coordinates OD data","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od2odf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coordinates from OD data — od2odf","text":"","code":"od2odf(flow, zones)"},{"path":"https://docs.ropensci.org/stplanr/reference/od2odf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coordinates from OD data — od2odf","text":"flow data frame representing origin-destination data. first two columns data frame correspond first column data zones. Thus cents_sf(), first column geo_code. corresponds first two columns flow(). zones spatial object representing origins (destinations separate destinations object provided) travel.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od2odf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract coordinates from OD data — od2odf","text":"Origin-destination (OD) data often provided form 1 line per OD pair, zone codes trip origin first column zone codes destination second column (see vignette(\"stplanr-od\")) details. od2odf() creates 'origin-destination data frame', columns containing origin destination codes (flow) match first column spatial (polygon point sf) object (zones). function returns data frame coordinates origin destination.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od2odf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract coordinates from OD data — od2odf","text":"","code":"od2odf(flow[1:2, ], zones_sf) #> Converting geometry ID from factor to character #>             o         d        ox       oy        dx       dy #> 1   E02002361 E02002361 -1.514962 53.82911 -1.514962 53.82911 #> 1.1 E02002361 E02002363 -1.514962 53.82911 -1.535734 53.82863"},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_from.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics of trips originating from zones in OD data — od_aggregate_from","title":"Summary statistics of trips originating from zones in OD data — od_aggregate_from","text":"function takes data frame OD data returns data frame reporting summary statistics unique zone origin.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_from.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics of trips originating from zones in OD data — od_aggregate_from","text":"","code":"od_aggregate_from(flow, attrib = NULL, FUN = sum, ..., col = 1)"},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_from.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics of trips originating from zones in OD data — od_aggregate_from","text":"flow data frame representing origin-destination data. first two columns data frame correspond first column data zones. Thus cents_sf(), first column geo_code. corresponds first two columns flow(). attrib character, column names sl aggregated FUN function summarise OD data ... Additional arguments passed FUN col column OD dataset grouped (1 default, first column usually represents origin)","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_from.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary statistics of trips originating from zones in OD data — od_aggregate_from","text":"default settings: default summary statistic sum() first column OD data assumed represent zone origin. default, attrib set, summarises numeric columns.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_from.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics of trips originating from zones in OD data — od_aggregate_from","text":"","code":"od_aggregate_from(flow) #> # A tibble: 7 × 13 #>   Area.of.residence   All Work.mainly.at.or.from.…¹ Underground..metro..…² Train #>   <chr>             <int>                     <int>                  <int> <int> #> 1 E02002361           336                         0                      0     1 #> 2 E02002363           473                         0                      0     2 #> 3 E02002367           302                         0                      0     1 #> 4 E02002371           633                         0                      0     2 #> 5 E02002377           395                         0                      0     0 #> 6 E02002382           277                         0                      0     0 #> 7 E02002393           400                         0                      1     6 #> # ℹ abbreviated names: ¹​Work.mainly.at.or.from.home, #> #   ²​Underground..metro..light.rail..tram #> # ℹ 8 more variables: Bus..minibus.or.coach <int>, Taxi <int>, #> #   Motorcycle..scooter.or.moped <int>, Driving.a.car.or.van <int>, #> #   Passenger.in.a.car.or.van <int>, Bicycle <int>, On.foot <int>, #> #   Other.method.of.travel.to.work <int>"},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics of trips arriving at destination zones in OD data — od_aggregate_to","title":"Summary statistics of trips arriving at destination zones in OD data — od_aggregate_to","text":"function takes data frame OD data returns data frame reporting summary statistics unique zone destination.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics of trips arriving at destination zones in OD data — od_aggregate_to","text":"","code":"od_aggregate_to(flow, attrib = NULL, FUN = sum, ..., col = 2)"},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics of trips arriving at destination zones in OD data — od_aggregate_to","text":"flow data frame representing origin-destination data. first two columns data frame correspond first column data zones. Thus cents_sf(), first column geo_code. corresponds first two columns flow(). attrib character, column names sl aggregated FUN function summarise OD data ... Additional arguments passed FUN col column OD dataset grouped (1 default, first column usually represents origin)","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_to.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary statistics of trips arriving at destination zones in OD data — od_aggregate_to","text":"default settings: assumes destination ID column 2nd default summary statistic sum(). default, attrib set, summarises numeric columns.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_aggregate_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics of trips arriving at destination zones in OD data — od_aggregate_to","text":"","code":"od_aggregate_to(flow) #> # A tibble: 7 × 13 #>   Area.of.workplace   All Work.mainly.at.or.from.…¹ Underground..metro..…² Train #>   <chr>             <int>                     <int>                  <int> <int> #> 1 E02002361           207                         0                      0     0 #> 2 E02002363           467                         0                      0     5 #> 3 E02002367           115                         0                      0     1 #> 4 E02002371           539                         0                      0     2 #> 5 E02002377           324                         0                      0     0 #> 6 E02002382           209                         0                      1     0 #> 7 E02002393           955                         0                      0     4 #> # ℹ abbreviated names: ¹​Work.mainly.at.or.from.home, #> #   ²​Underground..metro..light.rail..tram #> # ℹ 8 more variables: Bus..minibus.or.coach <int>, Taxi <int>, #> #   Motorcycle..scooter.or.moped <int>, Driving.a.car.or.van <int>, #> #   Passenger.in.a.car.or.van <int>, Bicycle <int>, On.foot <int>, #> #   Other.method.of.travel.to.work <int>"},{"path":"https://docs.ropensci.org/stplanr/reference/od_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Create matrices representing origin-destination coordinates — od_coords","title":"Create matrices representing origin-destination coordinates — od_coords","text":"function takes wide range input data types (spatial lines, points text strings) returns matrix coordinates representing origin (fx, fy) destination (tx, ty) points.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create matrices representing origin-destination coordinates — od_coords","text":"","code":"od_coords(from = NULL, to = NULL, l = NULL)"},{"path":"https://docs.ropensci.org/stplanr/reference/od_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create matrices representing origin-destination coordinates — od_coords","text":"object representing origins (lines provided first argument, assigned l) object representing destinations l needed empty, case spatial object representing desire lines","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create matrices representing origin-destination coordinates — od_coords","text":"","code":"od_coords(from = c(0, 52), to = c(1, 53)) # lon/lat coordinates #>      fx fy tx ty #> [1,]  0 52  1 53 od_coords(cents_sf[1:3, ], cents_sf[2:4, ]) # sf points #>             fx       fy        tx       ty #> [1,] -1.546463 53.80952 -1.511861 53.81161 #> [2,] -1.511861 53.81161 -1.524205 53.80410 #> [3,] -1.524205 53.80410 -1.550806 53.82442 # od_coords(\"Hereford\", \"Leeds\") # geocode locations od_coords(flowlines_sf[1:3, ]) #>             fx       fy        tx       ty #> [1,] -1.516734 53.82887 -1.535617 53.82847 #> [2,] -1.516734 53.82887 -1.550807 53.82442 #> [3,] -1.516734 53.82887 -1.530712 53.81756"},{"path":"https://docs.ropensci.org/stplanr/reference/od_coords2line.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert origin-destination coordinates into desire lines — od_coords2line","title":"Convert origin-destination coordinates into desire lines — od_coords2line","text":"Convert origin-destination coordinates desire lines","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_coords2line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert origin-destination coordinates into desire lines — od_coords2line","text":"","code":"od_coords2line(odc, crs = 4326, remove_duplicates = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/od_coords2line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert origin-destination coordinates into desire lines — od_coords2line","text":"odc data frame matrix representing coordinates origin-destination data. first two columns represent coordinates origin (typically longitude latitude) points; third fourth columns represent coordinates destination (CRS). row represents travel origin destination. crs number representing coordinate reference system result, 4326 default. remove_duplicates rows duplicated rows removed? TRUE default.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_coords2line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert origin-destination coordinates into desire lines — od_coords2line","text":"","code":"odf <- od_coords(l = flowlines_sf) odlines <- od_coords2line(odf) odlines <- od_coords2line(odf, crs = 4326) plot(odlines)  x_coords <- 1:3 n <- 50 d <- data.frame(lapply(1:4, function(x) sample(x_coords, n, replace = TRUE))) names(d) <- c(\"fx\", \"fy\", \"tx\", \"ty\") l <- od_coords2line(d) #> Duplicate OD pairs identified, removing 14 rows plot(l)  nrow(l) #> [1] 36 l_with_duplicates <- od_coords2line(d, remove_duplicates = FALSE) plot(l_with_duplicates)  nrow(l_with_duplicates) #> [1] 50"},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of desire line representations of origin-destination data from UK Census — od_data_lines","title":"Example of desire line representations of origin-destination data from UK Census — od_data_lines","text":"Derived od_data_sample showing movement points represented cents_sf","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_lines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of desire line representations of origin-destination data from UK Census — od_data_lines","text":"data frame (tibble) object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of desire line representations of origin-destination data from UK Census — od_data_lines","text":"","code":"od_data_lines #> Simple feature collection with 64 features and 18 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.550806 ymin: 53.8041 xmax: -1.511861 ymax: 53.82887 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    geo_code1 geo_code2 all from_home light_rail train bus taxi motorbike #> 1  E02002361 E02002361 109         0          0     0   4    2         0 #> 2  E02002361 E02002363  38         0          0     1   4    1         0 #> 3  E02002361 E02002367  10         0          0     0   1    0         0 #> 4  E02002361 E02002371  44         0          0     0   2    2         0 #> 5  E02002361 E02002377  34         0          0     0   0    1         2 #> 6  E02002361 E02002382   7         0          0     0   1    0         0 #> 7  E02002361 E02002384  53         0          0     1  10    1         0 #> 8  E02002361 E02002393  94         0          0     0  17    1         0 #> 9  E02002363 E02002361  30         0          0     0   0    1         1 #> 10 E02002363 E02002363 183         0          0     2  13    3         0 #>    car_driver car_passenger bicycle foot other geo_name1 geo_name2  la_1  la_2 #> 1          39             3       2   59     0 Leeds 032 Leeds 032 Leeds Leeds #> 2          24             4       0    4     0 Leeds 032 Leeds 034 Leeds Leeds #> 3           8             0       0    1     0 Leeds 032 Leeds 038 Leeds Leeds #> 4          28             3       3    6     0 Leeds 032 Leeds 042 Leeds Leeds #> 5          19             3       0    9     0 Leeds 032 Leeds 048 Leeds Leeds #> 6           5             1       0    0     0 Leeds 032 Leeds 053 Leeds Leeds #> 7          30             4       4    3     0 Leeds 032 Leeds 055 Leeds Leeds #> 8          55            10       0   10     1 Leeds 032 Leeds 064 Leeds Leeds #> 9          18             3       1    6     0 Leeds 034 Leeds 032 Leeds Leeds #> 10         58             1       5  101     0 Leeds 034 Leeds 034 Leeds Leeds #>                          geometry #> 1  LINESTRING (-1.516734 53.82... #> 2  LINESTRING (-1.516734 53.82... #> 3  LINESTRING (-1.516734 53.82... #> 4  LINESTRING (-1.516734 53.82... #> 5  LINESTRING (-1.516734 53.82... #> 6  LINESTRING (-1.516734 53.82... #> 7  LINESTRING (-1.516734 53.82... #> 8  LINESTRING (-1.516734 53.82... #> 9  LINESTRING (-1.535617 53.82... #> 10 LINESTRING (-1.535617 53.82..."},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Example segment-level route data — od_data_routes","title":"Example segment-level route data — od_data_routes","text":"See data-raw/generate-data.Rmd details created. dataset shows routes origins destinations represented od_data_lines","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_routes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example segment-level route data — od_data_routes","text":"data frame (tibble) object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example segment-level route data — od_data_routes","text":"","code":"od_data_routes #> Simple feature collection with 750 features and 10 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.55995 ymin: 53.80248 xmax: -1.51099 ymax: 53.83041 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    route_number               name distances time busynance elevations #> 1             2       Gledhow Lane       308   88      1252   112.5263 #> 2             2  Gledhow Wood Road        27    4        69   111.0000 #> 3             2       Gledhow Lane       281   52       738   106.5000 #> 4             2       Gledhow Lane       143   31       433    84.0000 #> 5             2       Gledhow Lane       550  315      3455    96.6250 #> 6             2 King George Avenue        19    4        37   110.0000 #> 7             2        Church Lane        98   15       157   107.1429 #> 8             2        Town Street        83   26       368   105.5556 #> 9             3       Gledhow Lane       308   88      1252   112.5263 #> 10            3  Gledhow Wood Road        27    4        69   111.0000 #>    start_longitude start_latitude finish_longitude finish_latitude #> 1         -1.51667       53.82868         -1.53556        53.82829 #> 2         -1.51667       53.82868         -1.53556        53.82829 #> 3         -1.51667       53.82868         -1.53556        53.82829 #> 4         -1.51667       53.82868         -1.53556        53.82829 #> 5         -1.51667       53.82868         -1.53556        53.82829 #> 6         -1.51667       53.82868         -1.53556        53.82829 #> 7         -1.51667       53.82868         -1.53556        53.82829 #> 8         -1.51667       53.82868         -1.53556        53.82829 #> 9         -1.51667       53.82868         -1.55106        53.82410 #> 10        -1.51667       53.82868         -1.55106        53.82410 #>                          geometry #> 1  LINESTRING (-1.51667 53.828... #> 2  LINESTRING (-1.52108 53.829... #> 3  LINESTRING (-1.52148 53.829... #> 4  LINESTRING (-1.52482 53.830... #> 5  LINESTRING (-1.52606 53.829... #> 6  LINESTRING (-1.53391 53.829... #> 7  LINESTRING (-1.53379 53.828... #> 8  LINESTRING (-1.53441 53.828... #> 9  LINESTRING (-1.51667 53.828... #> 10 LINESTRING (-1.52108 53.829..."},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of origin-destination data from UK Census — od_data_sample","title":"Example of origin-destination data from UK Census — od_data_sample","text":"See data-raw/generate-data.Rmd details created.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_sample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of origin-destination data from UK Census — od_data_sample","text":"data frame (tibble) object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_data_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of origin-destination data from UK Census — od_data_sample","text":"","code":"od_data_sample #> # A tibble: 64 × 18 #>    geo_code1 geo_code2   all from_home light_rail train   bus  taxi motorbike #>    <chr>     <chr>     <dbl>     <dbl>      <dbl> <dbl> <dbl> <dbl>     <dbl> #>  1 E02002361 E02002361   109         0          0     0     4     2         0 #>  2 E02002361 E02002363    38         0          0     1     4     1         0 #>  3 E02002361 E02002367    10         0          0     0     1     0         0 #>  4 E02002361 E02002371    44         0          0     0     2     2         0 #>  5 E02002361 E02002377    34         0          0     0     0     1         2 #>  6 E02002361 E02002382     7         0          0     0     1     0         0 #>  7 E02002361 E02002384    53         0          0     1    10     1         0 #>  8 E02002361 E02002393    94         0          0     0    17     1         0 #>  9 E02002363 E02002361    30         0          0     0     0     1         1 #> 10 E02002363 E02002363   183         0          0     2    13     3         0 #> # ℹ 54 more rows #> # ℹ 9 more variables: car_driver <dbl>, car_passenger <dbl>, bicycle <dbl>, #> #   foot <dbl>, other <dbl>, geo_name1 <chr>, geo_name2 <chr>, la_1 <chr>, #> #   la_2 <chr>"},{"path":"https://docs.ropensci.org/stplanr/reference/od_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two ID values to create a single ID number — od_id","title":"Combine two ID values to create a single ID number — od_id","text":"Combine two ID values create single ID number","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two ID values to create a single ID number — od_id","text":"","code":"od_id_szudzik(x, y, ordermatters = FALSE)  od_id_max_min(x, y)  od_id_character(x, y)"},{"path":"https://docs.ropensci.org/stplanr/reference/od_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two ID values to create a single ID number — od_id","text":"x vector numeric, character, factor values y vector numeric, character, factor values ordermatters logical, order values matter pairing, default = FALSE","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine two ID values to create a single ID number — od_id","text":"OD data common many 'oneway' flows \"B\" \"B \". can useful group single ID represents pairs IDs without directionality, contain 'twoway' bi-directional values. od_id* functions take two vectors equal length return vector IDs, unique combination twoway flows. Szudzik pairing function, two vectors equal length. returns vector ID numbers. function superseeds od_id_order faster large datasets","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two ID values to create a single ID number — od_id","text":"","code":"(d <- od_data_sample[2:9, 1:2]) #> # A tibble: 8 × 2 #>   geo_code1 geo_code2 #>   <chr>     <chr>     #> 1 E02002361 E02002363 #> 2 E02002361 E02002367 #> 3 E02002361 E02002371 #> 4 E02002361 E02002377 #> 5 E02002361 E02002382 #> 6 E02002361 E02002384 #> 7 E02002361 E02002393 #> 8 E02002363 E02002361 (id <- od_id_character(d[[1]], d[[2]])) #> [1] \"E02002361 E02002363\" \"E02002361 E02002367\" \"E02002361 E02002371\" #> [4] \"E02002361 E02002377\" \"E02002361 E02002382\" \"E02002361 E02002384\" #> [7] \"E02002361 E02002393\" \"E02002361 E02002363\" duplicated(id) #> [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE od_id_szudzik(d[[1]], d[[2]]) #> [1]  5 10 17 26 37 50 65  5 od_id_max_min(d[[1]], d[[2]]) #> [1]  4  7 11 16 22 29 37  4"},{"path":"https://docs.ropensci.org/stplanr/reference/od_id_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate ordered ids of OD pairs so lowest is always first\nThis function is slow on large datasets, see szudzik_pairing for faster alternative — od_id_order","title":"Generate ordered ids of OD pairs so lowest is always first\nThis function is slow on large datasets, see szudzik_pairing for faster alternative — od_id_order","text":"Generate ordered ids OD pairs lowest always first function slow large datasets, see szudzik_pairing faster alternative","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_id_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate ordered ids of OD pairs so lowest is always first\nThis function is slow on large datasets, see szudzik_pairing for faster alternative — od_id_order","text":"","code":"od_id_order(x, id1 = names(x)[1], id2 = names(x)[2])"},{"path":"https://docs.ropensci.org/stplanr/reference/od_id_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate ordered ids of OD pairs so lowest is always first\nThis function is slow on large datasets, see szudzik_pairing for faster alternative — od_id_order","text":"x data frame SpatialLinesDataFrame, representing OD matrix id1 Optional (assumed first column) text string referring name variable containing unique id origin id2 Optional (assumed second column) text string referring name variable containing unique id destination","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_id_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate ordered ids of OD pairs so lowest is always first\nThis function is slow on large datasets, see szudzik_pairing for faster alternative — od_id_order","text":"","code":"x <- data.frame(id1 = c(1, 1, 2, 2, 3), id2 = c(1, 2, 3, 1, 4)) od_id_order(x) # 4th line switches id1 and id2 so stplanr.key is in order #>   stplanr.id1 stplanr.id1.1 stplanr.key #> 1           1             1         1 1 #> 2           1             2         1 2 #> 3           2             3         2 3 #> 4           2             1         1 2 #> 5           3             4         3 4"},{"path":"https://docs.ropensci.org/stplanr/reference/od_oneway.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate od pairs they become non-directional — od_oneway","title":"Aggregate od pairs they become non-directional — od_oneway","text":"example, sum total travel directions.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_oneway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate od pairs they become non-directional — od_oneway","text":"","code":"od_oneway(   x,   attrib = names(x[-c(1:2)])[vapply(x[-c(1:2)], is.numeric, TRUE)],   id1 = names(x)[1],   id2 = names(x)[2],   stplanr.key = NULL )"},{"path":"https://docs.ropensci.org/stplanr/reference/od_oneway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate od pairs they become non-directional — od_oneway","text":"x data frame SpatialLinesDataFrame, representing OD matrix attrib vector column numbers names, representing variables aggregated. default, numeric variables selected. aggregate id1 Optional (assumed first column) text string referring name variable containing unique id origin id2 Optional (assumed second column) text string referring name variable containing unique id destination stplanr.key Optional key unique OD pairs regardless order, e.g., generated od_id_max_min() od_id_szudzik()","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_oneway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate od pairs they become non-directional — od_oneway","text":"oneway outputs data frame (sf data frame) rows containing results user-selected attribute values aggregated.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_oneway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate od pairs they become non-directional — od_oneway","text":"Flow data often contains movement two directions: point point B B . can problematic transport planning, magnitude flow along route can masked flows direction. largest flow either direction captured analysis, example, true extent travel heavily -estimated OD pairs similar amounts travel directions. Flows direction often represented overlapping lines identical geometries can confusing users difficult plot.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_oneway.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate od pairs they become non-directional — od_oneway","text":"","code":"(od_min <- od_data_sample[c(1, 2, 9), 1:6]) #> # A tibble: 3 × 6 #>   geo_code1 geo_code2   all from_home light_rail train #>   <chr>     <chr>     <dbl>     <dbl>      <dbl> <dbl> #> 1 E02002361 E02002361   109         0          0     0 #> 2 E02002361 E02002363    38         0          0     1 #> 3 E02002363 E02002361    30         0          0     0 (od_oneway <- od_oneway(od_min)) #> # A tibble: 2 × 6 #>   geo_code1 geo_code2   all from_home light_rail train #>   <chr>     <chr>     <dbl>     <dbl>      <dbl> <dbl> #> 1 E02002361 E02002361   109         0          0     0 #> 2 E02002361 E02002363    68         0          0     1 # (od_oneway_old = onewayid(od_min, attrib = 3:6)) # old implementation nrow(od_oneway) < nrow(od_min) # result has fewer rows #> [1] TRUE sum(od_min$all) == sum(od_oneway$all) # but the same total flow #> [1] TRUE od_oneway(od_min, attrib = \"all\") #> # A tibble: 2 × 3 #>   geo_code1 geo_code2   all #>   <chr>     <chr>     <dbl> #> 1 E02002361 E02002361   109 #> 2 E02002361 E02002363    68 attrib <- which(vapply(flow, is.numeric, TRUE)) flow_oneway <- od_oneway(flow, attrib = attrib) colSums(flow_oneway[attrib]) == colSums(flow[attrib]) # test if the colSums are equal #>                                  All          Work.mainly.at.or.from.home  #>                                 TRUE                                 TRUE  #> Underground..metro..light.rail..tram                                Train  #>                                 TRUE                                 TRUE  #>                Bus..minibus.or.coach                                 Taxi  #>                                 TRUE                                 TRUE  #>         Motorcycle..scooter.or.moped                 Driving.a.car.or.van  #>                                 TRUE                                 TRUE  #>            Passenger.in.a.car.or.van                              Bicycle  #>                                 TRUE                                 TRUE  #>                              On.foot       Other.method.of.travel.to.work  #>                                 TRUE                                 TRUE  # Demonstrate the results from oneway and onewaygeo are identical flow_oneway_sf <- od_oneway(flowlines_sf) #> Joining with `by = join_by(Area.of.residence, Area.of.workplace)` plot(flow_oneway_sf$geometry, lwd = flow_oneway_sf$All / mean(flow_oneway_sf$All))"},{"path":"https://docs.ropensci.org/stplanr/reference/od_to_odmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert origin-destination data from long to wide format — od_to_odmatrix","title":"Convert origin-destination data from long to wide format — od_to_odmatrix","text":"function takes data frame representing travel origins (origin codes name_orig, typically 1st column) destinations (destination codes name_dest, typically second column) returns matrix cell values (attrib, third column default) representing travel origins destinations.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/od_to_odmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert origin-destination data from long to wide format — od_to_odmatrix","text":"","code":"od_to_odmatrix(flow, attrib = 3, name_orig = 1, name_dest = 2)"},{"path":"https://docs.ropensci.org/stplanr/reference/od_to_odmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert origin-destination data from long to wide format — od_to_odmatrix","text":"flow data frame representing flows origin destinations attrib number character string representing column containing attribute data interest flow data frame name_orig number character string representing zone origin name_dest number character string representing zone destination","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/od_to_odmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert origin-destination data from long to wide format — od_to_odmatrix","text":"","code":"od_to_odmatrix(flow) #>           E02002361 E02002363 E02002367 E02002371 E02002377 E02002382 E02002393 #> E02002361       109        38        10        44        34         7        94 #> E02002363        30       183        11        72        13         8       156 #> E02002367         5        84        41        66         9         9        88 #> E02002371        20       110        27       220        58        33       165 #> E02002377        21        30         7        62       129        53        93 #> E02002382         8         8        12        36        46        73        94 #> E02002393        14        14         7        39        35        26       265 od_to_odmatrix(flow[1:9, ]) #>           E02002361 E02002363 E02002367 E02002371 E02002377 E02002382 E02002393 #> E02002361       109        38        10        44        34         7        94 #> E02002363        30       183        NA        NA        NA        NA        NA od_to_odmatrix(flow[1:9, ], attrib = \"Bicycle\") #>           E02002361 E02002363 E02002367 E02002371 E02002377 E02002382 E02002393 #> E02002361         2         0         0         3         0         0         0 #> E02002363         1         5        NA        NA        NA        NA        NA"},{"path":"https://docs.ropensci.org/stplanr/reference/odmatrix_to_od.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert origin-destination data from wide to long format — odmatrix_to_od","title":"Convert origin-destination data from wide to long format — odmatrix_to_od","text":"function takes matrix representing travel origins (origin codes rownames matrix) destinations (destination codes colnames matrix) returns data frame representing origin-destination pairs.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/odmatrix_to_od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert origin-destination data from wide to long format — odmatrix_to_od","text":"","code":"odmatrix_to_od(odmatrix)"},{"path":"https://docs.ropensci.org/stplanr/reference/odmatrix_to_od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert origin-destination data from wide to long format — odmatrix_to_od","text":"odmatrix matrix row columns representing origin destination zone codes cells representing flow zones.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/odmatrix_to_od.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert origin-destination data from wide to long format — odmatrix_to_od","text":"function returns data frame rows ordered origin destination zone code values names orig, dest flow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/odmatrix_to_od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert origin-destination data from wide to long format — odmatrix_to_od","text":"","code":"odmatrix <- od_to_odmatrix(flow) odmatrix_to_od(odmatrix) #>         orig      dest flow #> 1  E02002361 E02002361  109 #> 8  E02002361 E02002363   38 #> 15 E02002361 E02002367   10 #> 22 E02002361 E02002371   44 #> 29 E02002361 E02002377   34 #> 36 E02002361 E02002382    7 #> 43 E02002361 E02002393   94 #> 2  E02002363 E02002361   30 #> 9  E02002363 E02002363  183 #> 16 E02002363 E02002367   11 #> 23 E02002363 E02002371   72 #> 30 E02002363 E02002377   13 #> 37 E02002363 E02002382    8 #> 44 E02002363 E02002393  156 #> 3  E02002367 E02002361    5 #> 10 E02002367 E02002363   84 #> 17 E02002367 E02002367   41 #> 24 E02002367 E02002371   66 #> 31 E02002367 E02002377    9 #> 38 E02002367 E02002382    9 #> 45 E02002367 E02002393   88 #> 4  E02002371 E02002361   20 #> 11 E02002371 E02002363  110 #> 18 E02002371 E02002367   27 #> 25 E02002371 E02002371  220 #> 32 E02002371 E02002377   58 #> 39 E02002371 E02002382   33 #> 46 E02002371 E02002393  165 #> 5  E02002377 E02002361   21 #> 12 E02002377 E02002363   30 #> 19 E02002377 E02002367    7 #> 26 E02002377 E02002371   62 #> 33 E02002377 E02002377  129 #> 40 E02002377 E02002382   53 #> 47 E02002377 E02002393   93 #> 6  E02002382 E02002361    8 #> 13 E02002382 E02002363    8 #> 20 E02002382 E02002367   12 #> 27 E02002382 E02002371   36 #> 34 E02002382 E02002377   46 #> 41 E02002382 E02002382   73 #> 48 E02002382 E02002393   94 #> 7  E02002393 E02002361   14 #> 14 E02002393 E02002363   14 #> 21 E02002393 E02002367    7 #> 28 E02002393 E02002371   39 #> 35 E02002393 E02002377   35 #> 42 E02002393 E02002382   26 #> 49 E02002393 E02002393  265 flow[1:9, 1:3] #>        Area.of.residence Area.of.workplace All #> 920573         E02002361         E02002361 109 #> 920575         E02002361         E02002363  38 #> 920578         E02002361         E02002367  10 #> 920582         E02002361         E02002371  44 #> 920587         E02002361         E02002377  34 #> 920591         E02002361         E02002382   7 #> 920601         E02002361         E02002393  94 #> 921220         E02002363         E02002361  30 #> 921222         E02002363         E02002363 183 odmatrix_to_od(od_to_odmatrix(flow[1:9, 1:3])) #>         orig      dest flow #> 1  E02002361 E02002361  109 #> 3  E02002361 E02002363   38 #> 5  E02002361 E02002367   10 #> 7  E02002361 E02002371   44 #> 9  E02002361 E02002377   34 #> 11 E02002361 E02002382    7 #> 13 E02002361 E02002393   94 #> 2  E02002363 E02002361   30 #> 4  E02002363 E02002363  183"},{"path":"https://docs.ropensci.org/stplanr/reference/onewaygeo.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate flows so they become non-directional (by geometry - the slow way) — onewaygeo","title":"Aggregate flows so they become non-directional (by geometry - the slow way) — onewaygeo","text":"Flow data often contains movement two directions: point point B B . can problematic transport planning, magnitude flow along route can masked flows direction. largest flow either direction captured analysis, example, true extent travel heavily -estimated OD pairs similar amounts travel directions.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/onewaygeo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate flows so they become non-directional (by geometry - the slow way) — onewaygeo","text":"","code":"onewaygeo(x, attrib)"},{"path":"https://docs.ropensci.org/stplanr/reference/onewaygeo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate flows so they become non-directional (by geometry - the slow way) — onewaygeo","text":"x dataset containing linestring geometries attrib text string containing name line's attribute aggregate numeric vector columns aggregated","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/onewaygeo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate flows so they become non-directional (by geometry - the slow way) — onewaygeo","text":"onewaygeo outputs SpatialLinesDataFrame single lines user-selected attribute values aggregated. lines distance (.e. intra-zone flows) included","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/onewaygeo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate flows so they become non-directional (by geometry - the slow way) — onewaygeo","text":"function aggregates directional flows non-directional flows, potentially halving number lines objects reducing number overlapping lines zero.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/osm_net_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of OpenStreetMap road network — osm_net_example","title":"Example of OpenStreetMap road network — osm_net_example","text":"Example OpenStreetMap road network","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/osm_net_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of OpenStreetMap road network — osm_net_example","text":"sf object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/osm_net_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of OpenStreetMap road network — osm_net_example","text":"","code":"osm_net_example #> Simple feature collection with 71 features and 5 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.535904 ymin: 53.79979 xmax: -1.524435 ymax: 53.80682 #> Geodetic CRS:  WGS 84 #> First 10 features: #>      osm_id      highway                   name lanes maxspeed #> 1   5082947     tertiary  Cross Stamford Street  <NA>     <NA> #> 2   6013279        trunk Sheepscar Street South     2   30 mph #> 3   6018346     tertiary                   <NA>     1     <NA> #> 4   6018347     tertiary  Cross Stamford Street     2     <NA> #> 5   6072857 unclassified                Mabgate  <NA>   30 mph #> 6   6072858  residential            Bell Street  <NA>     <NA> #> 7   6072859 unclassified           Byron Street  <NA>     <NA> #> 8   6242167     tertiary           Skinner Lane     1     <NA> #> 9  23091062     tertiary             Cherry Row     2   30 mph #> 10 23091370      footway            Hill Street  <NA>     <NA> #>                          geometry #> 1  LINESTRING (-1.531854 53.80... #> 2  LINESTRING (-1.532834 53.80... #> 3  LINESTRING (-1.532293 53.80... #> 4  LINESTRING (-1.531854 53.80... #> 5  LINESTRING (-1.533278 53.79... #> 6  LINESTRING (-1.532694 53.80... #> 7  LINESTRING (-1.532978 53.80... #> 8  LINESTRING (-1.532765 53.80... #> 9  LINESTRING (-1.529449 53.80... #> 10 LINESTRING (-1.527111 53.80..."},{"path":"https://docs.ropensci.org/stplanr/reference/overline.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert series of overlapping lines into a route network — overline","title":"Convert series of overlapping lines into a route network — overline","text":"function takes series overlapping lines converts single route network. function intended replacement overline() significantly faster especially large datasets. However, also uses memory.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/overline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert series of overlapping lines into a route network — overline","text":"","code":"overline(   sl,   attrib,   ncores = 1,   simplify = TRUE,   regionalise = 1e+09,   quiet = ifelse(nrow(sl) < 1000, TRUE, FALSE),   fun = sum )  overline2(   sl,   attrib,   ncores = 1,   simplify = TRUE,   regionalise = 1e+07,   quiet = ifelse(nrow(sl) < 1000, TRUE, FALSE),   fun = sum )"},{"path":"https://docs.ropensci.org/stplanr/reference/overline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert series of overlapping lines into a route network — overline","text":"sl spatial object representing routes transport network attrib character, column names sl aggregated ncores integer, many cores use parallel processing, default = 1 simplify logical, TRUE group final segments back lines, default = TRUE regionalise integer, simplification regonalisation used number segments exceeds value quiet function omit messages? NULL default, means output shown sl 1000 rows. fun Named list functions summaries attributes ? sum default. list(sum = sum, average = mean) summarise attributes sum mean.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/overline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert series of overlapping lines into a route network — overline","text":"sf object representing route network","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/overline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert series of overlapping lines into a route network — overline","text":"function can used estimate amount transport 'flow' route segment level based input datasets routing services, example linestring geometries created route() function. overline() function breaks line many straight segments looks duplicated segments. Attributes summed duplicated segments, simplify TRUE segments identical attributes recombined linestrings. following arguments apply sf implementation overline(): ncores, number cores use parallel processing simplify, final segments converted back longer lines? default setting TRUE. simplify = FALSE results straight line segments consisting 2 vertices (start end point), resulting data frame many rows simplified results (see examples). regionalise threshold number rows regionalisation used (see details). sf objects Regionalisation breaks dataset 10 x 10 grid performed simplification across grid. significantly reduces computation time large datasets, slightly increases final file size. smaller datasets increases computation time slightly reduces memory usage may also useful. known limitation method overlapping segments different lengths aggregated. can occur lines stop halfway road. Typically errors small, artefacts may remain within resulting data. large datasets nrow(x) > 1000000, memory usage can significant. cases possible overline subsets dataset, rbind results together, overline , produce final result. Multicore support enabled regionalised simplification stage help stages.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/overline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert series of overlapping lines into a route network — overline","text":"Morgan M Lovelace R (2020). Travel flow aggregation: Nationally scalable methods interactive online visualisation transport behaviour road network level. Environment Planning B: Urban Analytics City Science. July 2020. doi:10.1177/2399808320942779 . Rowlingson, B (2015). Overlaying lines aggregating values overlapping segments. Reproducible question https://gis.stackexchange.com. See https://gis.stackexchange.com/questions/139681/.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/overline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert series of overlapping lines into a route network — overline","text":"Barry Rowlingson Malcolm Morgan","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/overline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert series of overlapping lines into a route network — overline","text":"","code":"sl <- routes_fast_sf[2:4, ] sl$All <- flowlines_sf$All[2:4] rnet <- overline(sl = sl, attrib = \"All\") nrow(sl) #> [1] 3 nrow(rnet) #> [1] 4 plot(rnet)  rnet_mean <- overline(sl, c(\"All\", \"av_incline\"), fun = list(mean = mean, sum = sum)) plot(rnet_mean, lwd = rnet_mean$All_sum / mean(rnet_mean$All_sum))  rnet_sf_raw <- overline(sl, attrib = \"length\", simplify = FALSE) nrow(rnet_sf_raw) #> [1] 151 summary(n_vertices(rnet_sf_raw)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>       2       2       2       2       2       2  plot(rnet_sf_raw)  rnet_sf_raw$n <- 1:nrow(rnet_sf_raw) plot(rnet_sf_raw[10:25, ])"},{"path":"https://docs.ropensci.org/stplanr/reference/overline_intersection.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert series of overlapping lines into a route network — overline_intersection","title":"Convert series of overlapping lines into a route network — overline_intersection","text":"function takes overlapping LINESTRINGs stored sf object returns route network composed non-overlapping geometries aggregated values.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/overline_intersection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert series of overlapping lines into a route network — overline_intersection","text":"","code":"overline_intersection(sl, attrib, fun = sum)"},{"path":"https://docs.ropensci.org/stplanr/reference/overline_intersection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert series of overlapping lines into a route network — overline_intersection","text":"sl sf LINESTRING object overlapping elements attrib character, column names sl aggregated fun Named list functions summaries attributes ? sum default. list(sum = sum, average = mean) summarise attributes sum mean.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/overline_intersection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert series of overlapping lines into a route network — overline_intersection","text":"","code":"routes_fast_sf$value <- 1 sl <- routes_fast_sf[4:6, ] attrib <- c(\"value\", \"length\") rnet <- overline_intersection(sl = sl, attrib) #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar plot(rnet, lwd = rnet$value)  # A larger example sl <- routes_fast_sf[4:7, ] rnet <- overline_intersection(sl = sl, attrib = c(\"value\", \"length\")) #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar plot(rnet, lwd = rnet$value)  rnet_sf <- overline(routes_fast_sf[4:7, ], attrib = c(\"value\", \"length\")) plot(rnet_sf, lwd = rnet_sf$value)   # An even larger example (not shown, takes time to run) # rnet = overline_intersection(routes_fast_sf, attrib = c(\"value\", \"length\")) # rnet_sf <- overline(routes_fast_sf, attrib = c(\"value\", \"length\"), buff_dist = 10) # plot(rnet$geometry, lwd = rnet$value * 2, col = \"grey\") # plot(rnet_sf$geometry,  lwd = rnet_sf$value, add = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See ?magrittr details.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/stplanr/reference/points2flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a series of points into geographical flows — points2flow","title":"Convert a series of points into geographical flows — points2flow","text":"Takes series geographical points converts spatial (linestring) object representing potential flows, 'spatial interaction', every combination points.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/points2flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a series of points into geographical flows — points2flow","text":"","code":"points2flow(p)"},{"path":"https://docs.ropensci.org/stplanr/reference/points2flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a series of points into geographical flows — points2flow","text":"p spatial (point) object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/points2flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a series of points into geographical flows — points2flow","text":"","code":"flow_sf <- points2flow(cents_sf[1:4, ]) plot(flow_sf)"},{"path":"https://docs.ropensci.org/stplanr/reference/points2line.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a series of points, or a matrix of coordinates, into a line — points2line","title":"Convert a series of points, or a matrix of coordinates, into a line — points2line","text":"function makes makes creation sf objects LINESTRING geometries easy.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/points2line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a series of points, or a matrix of coordinates, into a line — points2line","text":"","code":"points2line(p)"},{"path":"https://docs.ropensci.org/stplanr/reference/points2line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a series of points, or a matrix of coordinates, into a line — points2line","text":"p spatial (points) obect matrix representing coordinates points.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/points2line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a series of points, or a matrix of coordinates, into a line — points2line","text":"","code":"l_sf <- points2line(cents_sf) plot(l_sf)"},{"path":"https://docs.ropensci.org/stplanr/reference/points2odf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a series of points into a dataframe of origins and destinations — points2odf","title":"Convert a series of points into a dataframe of origins and destinations — points2odf","text":"Takes series geographical points converts data.frame representing potential flows, 'spatial interaction', every combination points.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/points2odf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a series of points into a dataframe of origins and destinations — points2odf","text":"","code":"points2odf(p)"},{"path":"https://docs.ropensci.org/stplanr/reference/points2odf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a series of points into a dataframe of origins and destinations — points2odf","text":"p spatial points object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/points2odf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a series of points into a dataframe of origins and destinations — points2odf","text":"","code":"points2odf(cents_sf) #>            O         D #> 1  E02002384 E02002384 #> 2  E02002384 E02002382 #> 3  E02002384 E02002393 #> 4  E02002384 E02002367 #> 5  E02002384 E02002363 #> 6  E02002384 E02002361 #> 7  E02002384 E02002377 #> 8  E02002384 E02002371 #> 9  E02002382 E02002384 #> 10 E02002382 E02002382 #> 11 E02002382 E02002393 #> 12 E02002382 E02002367 #> 13 E02002382 E02002363 #> 14 E02002382 E02002361 #> 15 E02002382 E02002377 #> 16 E02002382 E02002371 #> 17 E02002393 E02002384 #> 18 E02002393 E02002382 #> 19 E02002393 E02002393 #> 20 E02002393 E02002367 #> 21 E02002393 E02002363 #> 22 E02002393 E02002361 #> 23 E02002393 E02002377 #> 24 E02002393 E02002371 #> 25 E02002367 E02002384 #> 26 E02002367 E02002382 #> 27 E02002367 E02002393 #> 28 E02002367 E02002367 #> 29 E02002367 E02002363 #> 30 E02002367 E02002361 #> 31 E02002367 E02002377 #> 32 E02002367 E02002371 #> 33 E02002363 E02002384 #> 34 E02002363 E02002382 #> 35 E02002363 E02002393 #> 36 E02002363 E02002367 #> 37 E02002363 E02002363 #> 38 E02002363 E02002361 #> 39 E02002363 E02002377 #> 40 E02002363 E02002371 #> 41 E02002361 E02002384 #> 42 E02002361 E02002382 #> 43 E02002361 E02002393 #> 44 E02002361 E02002367 #> 45 E02002361 E02002363 #> 46 E02002361 E02002361 #> 47 E02002361 E02002377 #> 48 E02002361 E02002371 #> 49 E02002377 E02002384 #> 50 E02002377 E02002382 #> 51 E02002377 E02002393 #> 52 E02002377 E02002367 #> 53 E02002377 E02002363 #> 54 E02002377 E02002361 #> 55 E02002377 E02002377 #> 56 E02002377 E02002371 #> 57 E02002371 E02002384 #> 58 E02002371 E02002382 #> 59 E02002371 E02002393 #> 60 E02002371 E02002367 #> 61 E02002371 E02002363 #> 62 E02002371 E02002361 #> 63 E02002371 E02002377 #> 64 E02002371 E02002371"},{"path":"https://docs.ropensci.org/stplanr/reference/quadrant.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a spatial object into quadrants — quadrant","title":"Split a spatial object into quadrants — quadrant","text":"Returns character vector NE, SE, SW, NW corresponding north-east, south-east quadrants respectively. number_out TRUE, returns numbers 1:4, respectively.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/quadrant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a spatial object into quadrants — quadrant","text":"","code":"quadrant(x, cent = NULL, number_out = FALSE)"},{"path":"https://docs.ropensci.org/stplanr/reference/quadrant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a spatial object into quadrants — quadrant","text":"x Object class sf cent centrepoint region interest. Quadrants defined based point. default geographic centroid zones. number_out result returned number?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/quadrant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a spatial object into quadrants — quadrant","text":"","code":"x = zones_sf (quads <- quadrant(x)) #> Warning: st_centroid assumes attributes are constant over geometries #> [1] \"SE\" \"SW\" \"SE\" \"NE\" \"NE\" \"SW\" \"NW\" \"SE\" plot(x$geometry, col = factor(quads))"},{"path":"https://docs.ropensci.org/stplanr/reference/read_table_builder.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and format Australian Bureau of Statistics (ABS) TableBuilder files — read_table_builder","title":"Import and format Australian Bureau of Statistics (ABS) TableBuilder files — read_table_builder","text":"Import format Australian Bureau Statistics (ABS) TableBuilder files","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/read_table_builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and format Australian Bureau of Statistics (ABS) TableBuilder files — read_table_builder","text":"","code":"read_table_builder(dataset, filetype = \"csv\", sheet = 1, removeTotal = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/read_table_builder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and format Australian Bureau of Statistics (ABS) TableBuilder files — read_table_builder","text":"dataset Either dataframe containing original data TableBuilder character string containing path unzipped TableBuilder file. filetype character string containing filetype. Valid values 'csv', 'legacycsv' 'xlsx' (default = 'csv'). Required even dataset dataframe. Use 'legacycsv' csv files derived earlier versions TableBuilder csv outputs csv versions xlsx files. Current csv output TableBuilder follow standard csv format. sheet integer value containing index sheet xlsx file (default = 1). removeTotal boolean value. TRUE removes rows columns totals (default = TRUE).","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/read_table_builder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import and format Australian Bureau of Statistics (ABS) TableBuilder files — read_table_builder","text":"Australian Bureau Statistics (ABS) provides customised tables census datasets format difficult use R contains rows additional information. function imports original (unzipped) TableBuilder files .csv .xlsx format creating R dataframe data. Note: recommend using readabs package purpose.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_add_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a node to route network — rnet_add_node","title":"Add a node to route network — rnet_add_node","text":"Add node route network","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_add_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a node to route network — rnet_add_node","text":"","code":"rnet_add_node(rnet, p)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_add_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a node to route network — rnet_add_node","text":"rnet route network type generated overline() p point represented sf object split route","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_add_node.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a node to route network — rnet_add_node","text":"","code":"sample_routes <- routes_fast_sf[2:6, NULL] sample_routes$value <- rep(1:3, length.out = 5) rnet <- overline2(sample_routes, attrib = \"value\") p <- sf::st_sfc(sf::st_point(c(-1.540, 53.826)), crs = sf::st_crs(rnet)) r_split <- route_split(rnet, p) plot(rnet$geometry, lwd = rnet$value * 5, col = \"grey\") plot(p, cex = 9, add = TRUE) plot(r_split, col = 1:nrow(r_split), add = TRUE, lwd = r_split$value)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_boundary_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Get points at the beginner and end of linestrings — rnet_boundary_points","title":"Get points at the beginner and end of linestrings — rnet_boundary_points","text":"Get points beginner end linestrings","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_boundary_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get points at the beginner and end of linestrings — rnet_boundary_points","text":"","code":"rnet_boundary_points(rnet)  rnet_boundary_df(rnet)  rnet_boundary_unique(rnet)  rnet_boundary_points_lwgeom(rnet)  rnet_duplicated_vertices(rnet, n = 2)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_boundary_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get points at the beginner and end of linestrings — rnet_boundary_points","text":"rnet sf sfc object LINESTRING geometry representing route network. n minimum number time vertex must duplicated returned","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_boundary_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get points at the beginner and end of linestrings — rnet_boundary_points","text":"","code":"has_sfheaders <- requireNamespace(\"sfheaders\", quietly = TRUE) if(has_sfheaders) { rnet <- rnet_roundabout bp1 <- rnet_boundary_points(rnet) bp2 <- line2points(rnet) # slower version with lwgeom bp3 <- rnet_boundary_points_lwgeom(rnet) # slower version with lwgeom bp4 <- rnet_boundary_unique(rnet) nrow(bp1) nrow(bp3) identical(sort(sf::st_coordinates(bp1)), sort(sf::st_coordinates(bp2))) identical(sort(sf::st_coordinates(bp3)), sort(sf::st_coordinates(bp4))) plot(rnet$geometry) plot(bp3, add = TRUE) }"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_breakup_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Break up an sf object with LINESTRING geometry. — rnet_breakup_vertices","title":"Break up an sf object with LINESTRING geometry. — rnet_breakup_vertices","text":"function breaks LINESTRING geometry multiple LINESTRING(s). used mainly preserving routability object created using Open Street Map data. See details, stplanr/issues/282, stplanr/issues/416.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_breakup_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break up an sf object with LINESTRING geometry. — rnet_breakup_vertices","text":"","code":"rnet_breakup_vertices(rnet, verbose = FALSE)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_breakup_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break up an sf object with LINESTRING geometry. — rnet_breakup_vertices","text":"rnet sf sfc object LINESTRING geometry representing route network. verbose Boolean. TRUE, function prints additional messages.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_breakup_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break up an sf object with LINESTRING geometry. — rnet_breakup_vertices","text":"sf sfc object LINESTRING geometry created breaking input object.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_breakup_vertices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Break up an sf object with LINESTRING geometry. — rnet_breakup_vertices","text":"LINESTRING geometry broken-one two following conditions met: two LINESTRINGS share POINT boundary point LINESTRING(s), (see rnet_roundabout example); two LINESTRINGS share POINT boundary LINESTRING (see rnet_cycleway_intersection example). problem first example , according algorithm behind SpatialLinesNetwork(), two LINESTRINGS connected share least one point boundaries. roads roundabout clearly connected \"real\" world corresponding LINESTRING objects share two distinct boundary points. fact, Open Street Map standards, roundabout represented closed circular LINESTRING, implies roundabout connected roads according SpatialLinesNetwork() definition. reasoning, roads second example clearly connected \"real\" world, share point boundaries. function used solve type problem.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_breakup_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break up an sf object with LINESTRING geometry. — rnet_breakup_vertices","text":"","code":"library(sf) def_par <- par(no.readonly = TRUE) par(mar = rep(0, 4))  # Check the geometry of the roundabout example. The dots represent the # boundary points of the LINESTRINGS. The \"isolated\" red point in the # top-left is the boundary point of the roundabout, and it is not shared # with any other street. plot(st_geometry(rnet_roundabout), lwd = 2, col = rainbow(nrow(rnet_roundabout))) boundary_points <- st_geometry(line2points(rnet_roundabout)) points_cols <- rep(rainbow(nrow(rnet_roundabout)), each = 2) plot(boundary_points, pch = 16, add = TRUE, col = points_cols, cex = 2)   # Clean the roundabout example. rnet_roundabout_clean <- rnet_breakup_vertices(rnet_roundabout) plot(st_geometry(rnet_roundabout_clean), lwd = 2, col = rainbow(nrow(rnet_roundabout_clean))) boundary_points <- st_geometry(line2points(rnet_roundabout_clean)) points_cols <- rep(rainbow(nrow(rnet_roundabout_clean)), each = 2) plot(boundary_points, pch = 16, add = TRUE, col = points_cols)  # The roundabout is now routable since it was divided into multiple pieces # (one for each colour), which, according to SpatialLinesNetwork() function, # are connected.  # Check the geometry of the overpasses example. This example is used to test # that this function does not create any spurious intersection. plot(st_geometry(rnet_overpass), lwd = 2, col = rainbow(nrow(rnet_overpass))) boundary_points <- st_geometry(line2points(rnet_overpass)) points_cols <- rep(rainbow(nrow(rnet_overpass)), each = 2) plot(boundary_points, pch = 16, add = TRUE, col = points_cols, cex = 2)  # At the moment the network is not routable since one of the underpasses is # not connected to the other streets.  # Check interactively. # mapview::mapview(rnet_overpass)  # Clean the network. It should not create any spurious intersection between # roads located at different heights. rnet_overpass_clean <- rnet_breakup_vertices(rnet_overpass) plot(st_geometry(rnet_overpass_clean), lwd = 2, col = rainbow(nrow(rnet_overpass_clean)))  # Check interactively. # mapview::mapview(rnet_overpass)  # Check the geometry of the cycleway_intersection example. The black dots # represent the boundary points and we can see that the two roads are not # connected according to SpatialLinesNetwork() function. plot(   rnet_cycleway_intersection$geometry,   lwd = 2,   col = rainbow(nrow(rnet_cycleway_intersection)),   cex = 2 ) plot(st_geometry(line2points(rnet_cycleway_intersection)), pch = 16, add = TRUE)  # Check interactively # mapview::mapview(rnet_overpass)  # Clean the rnet object and plot the result. rnet_cycleway_intersection_clean <- rnet_breakup_vertices(rnet_cycleway_intersection) plot(   rnet_cycleway_intersection_clean$geometry,   lwd = 2,   col = rainbow(nrow(rnet_cycleway_intersection_clean)),   cex = 2 ) plot(st_geometry(line2points(rnet_cycleway_intersection_clean)), pch = 16, add = TRUE)   par(def_par)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_connected.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep only segments connected to the largest group in a network — rnet_connected","title":"Keep only segments connected to the largest group in a network — rnet_connected","text":"function takes sf object representing road network returns parts network largest group.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_connected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep only segments connected to the largest group in a network — rnet_connected","text":"","code":"rnet_connected(rnet)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_connected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep only segments connected to the largest group in a network — rnet_connected","text":"rnet sf object representing road network","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_connected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep only segments connected to the largest group in a network — rnet_connected","text":"sf object representing largest group network","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_connected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep only segments connected to the largest group in a network — rnet_connected","text":"","code":"rnet <- rnet_breakup_vertices(stplanr::osm_net_example) rnet_largest_group <- rnet_connected(rnet) plot(rnet$geometry)  plot(rnet_largest_group$geometry)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_cycleway_intersection.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of cycleway intersection data showing problems for SpatialLinesNetwork objects — rnet_cycleway_intersection","title":"Example of cycleway intersection data showing problems for SpatialLinesNetwork objects — rnet_cycleway_intersection","text":"See data-raw/rnet_cycleway_intersection details created.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_cycleway_intersection.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of cycleway intersection data showing problems for SpatialLinesNetwork objects — rnet_cycleway_intersection","text":"sf object","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_cycleway_intersection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of cycleway intersection data showing problems for SpatialLinesNetwork objects — rnet_cycleway_intersection","text":"","code":"rnet_cycleway_intersection #> Simple feature collection with 2 features and 27 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.547457 ymin: 53.81363 xmax: -1.54453 ymax: 53.81545 #> Geodetic CRS:  WGS 84 #> # A tibble: 2 × 28 #>   osm_id    name     highway waterway aerialway barrier man_made maxspeed oneway #> * <chr>     <chr>    <chr>   <chr>    <chr>     <chr>   <chr>    <chr>    <chr>  #> 1 145735609 Cross C… tertia… NA       NA        NA      NA       NA       NA     #> 2 236285574 NA       cyclew… NA       NA        NA      NA       NA       NA     #> # ℹ 19 more variables: building <chr>, surface <chr>, landuse <chr>, #> #   natural <chr>, start_date <chr>, wall <chr>, service <chr>, lanes <chr>, #> #   layer <chr>, tracktype <chr>, bridge <chr>, foot <chr>, bicycle <chr>, #> #   lit <chr>, railway <chr>, footway <chr>, z_order <int>, other_tags <chr>, #> #   geometry <LINESTRING [°]>"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_get_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract nodes from route network — rnet_get_nodes","title":"Extract nodes from route network — rnet_get_nodes","text":"Extract nodes route network","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_get_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract nodes from route network — rnet_get_nodes","text":"","code":"rnet_get_nodes(rnet, p = NULL)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_get_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract nodes from route network — rnet_get_nodes","text":"rnet route network type generated overline() p point represented sf object split route","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_get_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract nodes from route network — rnet_get_nodes","text":"","code":"rnet_get_nodes(route_network_sf) #> Geometry set for 52 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.550964 ymin: 53.80432 xmax: -1.512596 ymax: 53.82957 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POINT (-1.550139 53.82495) #> POINT (-1.550964 53.82408) #> POINT (-1.546613 53.82493) #> POINT (-1.534408 53.8282) #> POINT (-1.545993 53.82494)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign segments in a route network to groups — rnet_group","title":"Assign segments in a route network to groups — rnet_group","text":"function assigns linestring features, many sf object can form route networks, groups. default, function igraph::clusters() used determine group membership, igraph::cluster*() function can used. See examples web page igraph.org/r/doc/communities.html information. web page, following clustering functions available:","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign segments in a route network to groups — rnet_group","text":"","code":"rnet_group(rnet, ...)  # S3 method for default rnet_group(rnet, ...)  # S3 method for sfc rnet_group(   rnet,   cluster_fun = igraph::clusters,   d = NULL,   as.undirected = TRUE,   ... )  # S3 method for sf rnet_group(   rnet,   cluster_fun = igraph::clusters,   d = NULL,   as.undirected = TRUE,   ... )"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign segments in a route network to groups — rnet_group","text":"rnet sf, sfc, sfNetwork object representing route network. ... Arguments passed methods. cluster_fun clustering function use. Various clustering functions available igraph package. Default: igraph::clusters(). d Optional distance variable used classify segments close (within certain distance specified d) necessarily touching .undirected Coerce graph created internally undirected graph igraph::.undirected()? TRUE default, enables use wider range clutering functions.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign segments in a route network to groups — rnet_group","text":"input rnet sf/sfc object, returns integer vector reporting groups network element. input sfNetwork object, returns sfNetwork object extra column called rnet_group representing groups network element. latter case, connectivity spatial object derived sfNetwork object.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign segments in a route network to groups — rnet_group","text":"cluster_edge_betweenness, cluster_fast_greedy, cluster_label_prop, cluster_leading_eigen, cluster_louvain, cluster_optimal, cluster_spinglass, cluster_walktrap","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign segments in a route network to groups — rnet_group","text":"","code":"rnet <- rnet_breakup_vertices(stplanr::osm_net_example) rnet$group <- rnet_group(rnet) plot(rnet[\"group\"])  # mapview::mapview(rnet[\"group\"]) rnet$group_25m <- rnet_group(rnet, d = 25) plot(rnet[\"group_25m\"])  rnet$group_walktrap <- rnet_group(rnet, igraph::cluster_walktrap) plot(rnet[\"group_walktrap\"])  rnet$group_louvain <- rnet_group(rnet, igraph::cluster_louvain) plot(rnet[\"group_louvain\"])  rnet$group_fast_greedy <- rnet_group(rnet, igraph::cluster_fast_greedy) plot(rnet[\"group_fast_greedy\"])"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Join route networks — rnet_join","title":"Join route networks — rnet_join","text":"spatial join function enables adding columns 'target' route network 'source' route network contains base geometry, e.g. OSM","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join route networks — rnet_join","text":"","code":"rnet_join(   rnet_x,   rnet_y,   dist = 5,   length_y = TRUE,   key_column = 1,   subset_x = FALSE,   dist_subset = NULL,   segment_length = 0,   endCapStyle = \"FLAT\",   contains = TRUE,   max_angle_diff = NULL,   crs = geo_select_aeq(rnet_x),   ... )"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join route networks — rnet_join","text":"rnet_x Target route network, output geometries features object. rnet_y Source route network. Columns route network object copied across new network. dist buffer width around rnet_y meters. 1 m default. length_y Add new column called length_y? Useful joining based length segments (e.g. weighted mean). TRUE default. key_column index key (unique identifier) column rnet_x. subset_x Subset source route network target network creating buffers? can lead faster better results. Default: FALSE. dist_subset buffer distance m apply breaking source object rnet_y. Default: 5. segment_length source route network split? 0 default, meaning splitting. Values 0 split source linestrings max distance. Around 5 (m) may sensible default many use cases, smaller value slower process. endCapStyle Type buffer. See ?sf::st_buffer details contains join based sf::st_contains sf::st_intersects? TRUE default. FALSE centroid segment rnet_y used join. Note: can result incorrectly assigning values sideroads, documented #520. max_angle_diff maximum angle difference x y nets value returned crs CRS use buffer operation. See ?geo_projected details. ... Additional arguments passed rnet_subset.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join route networks — rnet_join","text":"output sf object containing polygons representing buffers around route network rnet_x. examples demonstrate join attributes route network object created function overline() onto OSM geometries. Note: main purpose function join ID rnet_x onto rnet_y. Subsequent steps, e.g. dplyr::inner_join() needed join attributes back onto rnet_x. rarely 1--1 relationships spatial network geometries take care using function. See #505 details link interactive example inputs outputs shown .","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join route networks — rnet_join","text":"","code":"library(sf) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union plot(osm_net_example$geometry, lwd = 5, col = \"grey\", add = TRUE) #> Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet plot(route_network_small[\"flow\"], add = TRUE) #> Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet rnetj <- rnet_join(osm_net_example, route_network_small, dist = 9) rnetj2 <- rnet_join(osm_net_example, route_network_small, dist = 9, segment_length = 10) #> Warning: The CRS of the input object is latlon. #> This may cause problems with the rsgeo implementation of line_segment(). # library(mapview) # mapview(rnetj, zcol = \"flow\") + #   mapview(rnetj2, zcol = \"flow\") + #   mapview(route_network_small, zcol = \"flow\") plot(sf::st_geometry(rnetj)) plot(rnetj[\"flow\"], add = TRUE) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf plot(rnetj2[\"flow\"], add = TRUE) plot(route_network_small[\"flow\"], add = TRUE) summary(rnetj2$length_y) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   7.628   8.531   9.581   9.802  10.265  13.332      55  rnetj_summary <- rnetj2 %>%   filter(!is.na(length_y)) %>%   sf::st_drop_geometry() %>%   group_by(osm_id) %>%   summarise(     flow = weighted.mean(flow, length_y, na.rm = TRUE),   ) osm_joined_rnet <- dplyr::left_join(osm_net_example, rnetj_summary) #> Joining with `by = join_by(osm_id)` plot(sf::st_geometry(route_network_small)) plot(route_network_small[\"flow\"], lwd = 3, add = TRUE) plot(sf::st_geometry(osm_joined_rnet), add = TRUE) # plot(osm_joined_rnet[c(\"flow\")], lwd = 9, add = TRUE) # Improve fit between geometries and performance by subsetting rnet_x osm_subset <- rnet_subset(osm_net_example, route_network_small, dist = 5) #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> Warning: repeating attributes for all sub-geometries for which they may not be constant #> Joining with `by = join_by(osm_id)` osm_joined_rnet <- dplyr::left_join(osm_subset, rnetj_summary) #> Joining with `by = join_by(osm_id)` plot(route_network_small[\"flow\"]) # plot(osm_joined_rnet[c(\"flow\")]) # mapview(joined_network) + #   mapview(route_network_small)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge route networks, keeping attributes with aggregating functions — rnet_merge","title":"Merge route networks, keeping attributes with aggregating functions — rnet_merge","text":"Merge route networks, keeping attributes aggregating functions","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge route networks, keeping attributes with aggregating functions — rnet_merge","text":"","code":"rnet_merge(   rnet_x,   rnet_y,   dist = 5,   funs = NULL,   sum_flows = TRUE,   crs = geo_select_aeq(rnet_x),   ... )"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge route networks, keeping attributes with aggregating functions — rnet_merge","text":"rnet_x Target route network, output geometries features object. rnet_y Source route network. Columns route network object copied across new network. dist buffer width around rnet_y meters. 1 m default. funs named list functions apply named columns, e.g.: list(flow = sum, length = mean). default sum numeric columns. sum_flows flows summed? TRUE default. crs CRS use buffer operation. See ?geo_projected details. ... Additional arguments passed rnet_join.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge route networks, keeping attributes with aggregating functions — rnet_merge","text":"sf object geometry rnet_x","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge route networks, keeping attributes with aggregating functions — rnet_merge","text":"","code":"# The source object: rnet_y <- route_network_small[\"flow\"] # The target object rnet_x <- rnet_subset(osm_net_example[1], rnet_y) #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> Warning: repeating attributes for all sub-geometries for which they may not be constant #> Joining with `by = join_by(osm_id)` plot(rnet_x$geometry, lwd = 5) plot(rnet_y$geometry, add = TRUE, col = \"red\", lwd = 2)  rnet_y$quietness <- rnorm(nrow(rnet_y)) funs <- list(flow = sum, quietness = mean) rnet_merged <- rnet_merge(rnet_x[1], rnet_y[c(\"flow\", \"quietness\")],   dist = 9, segment_length = 20, funs = funs ) #> Warning: The CRS of the input object is latlon. #> This may cause problems with the rsgeo implementation of line_segment(). #> Joining with `by = join_by(osm_id)` plot(rnet_y$geometry, lwd = 5, col = \"lightgrey\") plot(rnet_merged[\"flow\"], add = TRUE, lwd = 2)   # # With a different CRS rnet_xp <- sf::st_transform(rnet_x, \"EPSG:27700\") rnet_yp <- sf::st_transform(rnet_y, \"EPSG:27700\") rnet_merged <- rnet_merge(rnet_xp[1], rnet_yp[c(\"flow\", \"quietness\")],   dist = 9, segment_length = 20, funs = funs ) #> Joining with `by = join_by(osm_id)` plot(rnet_merged[\"flow\"])  # rnet_merged2 = rnet_merge(rnet_x[1], rnet_y[c(\"flow\", \"quietness\")], #                          dist = 9, segment_length = 20, funs = funs, #                          crs = \"EPSG:27700\") # waldo::compare(rnet_merged, rnet_merged2) # plot(rnet_merged$flow, rnet_merged2$flow) # # Larger example # system(\"gh release list\") # system(\"gh release upload v1.0.2 rnet_*\") # List the files released in v1.0.2: # system(\"gh release download v1.0.2\") # rnet_x = sf::read_sf(\"rnet_x_ed.geojson\") # rnet_y = sf::read_sf(\"rnet_y_ed.geojson\") # rnet_merged = rnet_merge(rnet_x, rnet_y, dist = 9, segment_length = 20, funs = funs)"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_overpass.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of overpass data showing problems for SpatialLinesNetwork objects — rnet_overpass","title":"Example of overpass data showing problems for SpatialLinesNetwork objects — rnet_overpass","text":"See data-raw/rnet_overpass.R details created.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_overpass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of overpass data showing problems for SpatialLinesNetwork objects — rnet_overpass","text":"sf object","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_overpass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of overpass data showing problems for SpatialLinesNetwork objects — rnet_overpass","text":"","code":"rnet_overpass #> Simple feature collection with 8 features and 27 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.555557 ymin: 53.79936 xmax: -1.554044 ymax: 53.80006 #> Geodetic CRS:  WGS 84 #> # A tibble: 8 × 28 #>   osm_id    name     highway waterway aerialway barrier man_made maxspeed oneway #> * <chr>     <chr>    <chr>   <chr>    <chr>     <chr>   <chr>    <chr>    <chr>  #> 1 5947825   Park La… tertia… NA       NA        NA      NA       30 mph   yes    #> 2 6192813   Inner R… motorw… NA       NA        NA      NA       40 mph   yes    #> 3 27440196  Inner R… motorw… NA       NA        NA      NA       40 mph   yes    #> 4 38888444  Park La… tertia… NA       NA        NA      NA       30 mph   yes    #> 5 99644807  NA       tertia… NA       NA        NA      NA       NA       yes    #> 6 172735110 West St… motorw… NA       NA        NA      NA       40 mph   yes    #> 7 175332052 West St… tertia… NA       NA        NA      NA       NA       yes    #> 8 175332053 NA       tertia… NA       NA        NA      NA       NA       yes    #> # ℹ 19 more variables: building <chr>, surface <chr>, landuse <chr>, #> #   natural <chr>, start_date <chr>, wall <chr>, service <chr>, lanes <chr>, #> #   layer <chr>, tracktype <chr>, bridge <chr>, foot <chr>, bicycle <chr>, #> #   lit <chr>, railway <chr>, footway <chr>, z_order <int>, other_tags <chr>, #> #   geometry <LINESTRING [°]>"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_roundabout.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of roundabout data showing problems for SpatialLinesNetwork objects — rnet_roundabout","title":"Example of roundabout data showing problems for SpatialLinesNetwork objects — rnet_roundabout","text":"See data-raw/rnet_roundabout.R details created.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_roundabout.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of roundabout data showing problems for SpatialLinesNetwork objects — rnet_roundabout","text":"sf object","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_roundabout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of roundabout data showing problems for SpatialLinesNetwork objects — rnet_roundabout","text":"","code":"rnet_roundabout #> Simple feature collection with 9 features and 27 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.473083 ymin: 53.83656 xmax: -1.471986 ymax: 53.83739 #> Geodetic CRS:  WGS 84 #> # A tibble: 9 × 28 #>   osm_id   name      highway waterway aerialway barrier man_made maxspeed oneway #> * <chr>    <chr>     <chr>   <chr>    <chr>     <chr>   <chr>    <chr>    <chr>  #> 1 2954219  NA        trunk   NA       NA        NA      NA       40 mph   NA     #> 2 4802965  Ring Road trunk   NA       NA        NA      NA       40 mph   yes    #> 3 5098650  NA        trunk   NA       NA        NA      NA       40 mph   yes    #> 4 90994242 Ring Road trunk   NA       NA        NA      NA       40 mph   yes    #> 5 90994243 Ring Road trunk   NA       NA        NA      NA       40 mph   yes    #> 6 90994244 NA        trunk   NA       NA        NA      NA       40 mph   yes    #> 7 90994245 NA        trunk   NA       NA        NA      NA       40 mph   yes    #> 8 90994247 Ring Road trunk   NA       NA        NA      NA       40 mph   yes    #> 9 90994249 Wetherby… trunk   NA       NA        NA      NA       40 mph   yes    #> # ℹ 19 more variables: building <chr>, surface <chr>, landuse <chr>, #> #   natural <chr>, start_date <chr>, wall <chr>, service <chr>, lanes <chr>, #> #   layer <chr>, tracktype <chr>, bridge <chr>, foot <chr>, bicycle <chr>, #> #   lit <chr>, railway <chr>, footway <chr>, z_order <int>, other_tags <chr>, #> #   geometry <LINESTRING [°]>"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset one route network based on overlaps with another — rnet_subset","title":"Subset one route network based on overlaps with another — rnet_subset","text":"Subset one route network based overlaps another","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset one route network based on overlaps with another — rnet_subset","text":"","code":"rnet_subset(   rnet_x,   rnet_y,   dist = 10,   crop = TRUE,   min_length = 20,   rm_disconnected = TRUE )"},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset one route network based on overlaps with another — rnet_subset","text":"rnet_x route network subset rnet_y subsetting route network dist buffer width around y meters. 1 m default. crop Crop rnet_x? TRUE default min_length Segments shorter multiple dist longer cropping process removed. 3 default. rm_disconnected Remove ways ","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/rnet_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset one route network based on overlaps with another — rnet_subset","text":"","code":"rnet_x <- osm_net_example[1] rnet_y <- route_network_small[\"flow\"] plot(rnet_x$geometry, lwd = 5) plot(rnet_y$geometry, add = TRUE, col = \"red\", lwd = 3) rnet_x_subset <- rnet_subset(rnet_x, rnet_y) #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> Warning: repeating attributes for all sub-geometries for which they may not be constant #> Joining with `by = join_by(osm_id)` plot(rnet_x_subset, add = TRUE, col = \"blue\") #> Warning: ignoring all but the first attribute"},{"path":"https://docs.ropensci.org/stplanr/reference/route.html","id":null,"dir":"Reference","previous_headings":"","what":"Plan routes on the transport network — route","title":"Plan routes on the transport network — route","text":"Takes origins destinations, finds optimal routes returns result spatial (sf sp) object. definition optimal depends routing function used","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plan routes on the transport network — route","text":"","code":"route(   from = NULL,   to = NULL,   l = NULL,   route_fun = cyclestreets::journey,   wait = 0,   n_print = 10,   list_output = FALSE,   cl = NULL,   ... )"},{"path":"https://docs.ropensci.org/stplanr/reference/route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plan routes on the transport network — route","text":"object representing origins (lines provided first argument, assigned l) object representing destinations l spatial (linestring) object route_fun routing function used converting lines routes wait long wait routes? 0 seconds default, can useful sending requests rate limited APIs. n_print number specifying frequently progress updates shown list_output FALSE (default) assumes spatial (linestring) object output. Set TRUE save output list. cl Cluster ... Arguments passed routing function","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plan routes on the transport network — route","text":"","code":"# Todo: add examples"},{"path":"https://docs.ropensci.org/stplanr/reference/route_average_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Return average gradient across a route — route_average_gradient","title":"Return average gradient across a route — route_average_gradient","text":"function assumes elevations distances units.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_average_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return average gradient across a route — route_average_gradient","text":"","code":"route_average_gradient(elevations, distances)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_average_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return average gradient across a route — route_average_gradient","text":"elevations Elevations, e.g. provided cyclestreets package distances Distances, e.g. provided cyclestreets package","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_average_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return average gradient across a route — route_average_gradient","text":"","code":"r1 <- od_data_routes[od_data_routes$route_number == 2, ] elevations <- r1$elevations distances <- r1$distances route_average_gradient(elevations, distances) # an average of a 4% gradient #> [1] 0.03907936"},{"path":"https://docs.ropensci.org/stplanr/reference/route_bikecitizens.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a route from the BikeCitizens web service — route_bikecitizens","title":"Get a route from the BikeCitizens web service — route_bikecitizens","text":"See bikecitizens.net interactive version routing engine used BikeCitizens.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_bikecitizens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a route from the BikeCitizens web service — route_bikecitizens","text":"","code":"route_bikecitizens(   from = NULL,   to = NULL,   base_url = \"https://map.bikecitizens.net/api/v1/locations/route.json\",   cccode = \"gb-leeds\",   routing_profile = \"balanced\",   bike_profile = \"citybike\",   from_lat = 53.8265,   from_lon = -1.576195,   to_lat = 53.80025,   to_lon = -1.51577 )"},{"path":"https://docs.ropensci.org/stplanr/reference/route_bikecitizens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a route from the BikeCitizens web service — route_bikecitizens","text":"numeric vector representing start point numeric vector representing end point base_url base URL routes cccode city code routes routing_profile type routing use? bike_profile type bike? from_lat Latitude origin from_lon Longitude origin to_lat Latitude destination to_lon Longitude destination","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_bikecitizens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a route from the BikeCitizens web service — route_bikecitizens","text":"See bikecitizens.R file data-raw directory package's development repository details usage examples.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_dodgr.html","id":null,"dir":"Reference","previous_headings":"","what":"Route on local data using the dodgr package — route_dodgr","title":"Route on local data using the dodgr package — route_dodgr","text":"Route local data using dodgr package","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_dodgr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Route on local data using the dodgr package — route_dodgr","text":"","code":"route_dodgr(from = NULL, to = NULL, l = NULL, net = NULL)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_dodgr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Route on local data using the dodgr package — route_dodgr","text":"object representing origins (lines provided first argument, assigned l) object representing destinations l spatial (linestring) object net sf object representing route network","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_dodgr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Route on local data using the dodgr package — route_dodgr","text":"","code":"if (requireNamespace(\"dodgr\")) {   from <- c(-1.5327, 53.8006) # from <- geo_code(\"pedallers arms leeds\")   to <- c(-1.5279, 53.8044) # to <- geo_code(\"gzing\")   # next 4 lines were used to generate `stplanr::osm_net_example`   # pts <- rbind(from, to)   # colnames(pts) <- c(\"X\", \"Y\")   # net <- dodgr::dodgr_streetnet(pts = pts, expand = 0.1)   # osm_net_example <- net[c(\"highway\", \"name\", \"lanes\", \"maxspeed\")]   r <- route_dodgr(from, to, net = osm_net_example)   plot(osm_net_example$geometry)   plot(r$geometry, add = TRUE, col = \"red\", lwd = 5) } #> Loading required namespace: dodgr"},{"path":"https://docs.ropensci.org/stplanr/reference/route_google.html","id":null,"dir":"Reference","previous_headings":"","what":"Find shortest path using Google services — route_google","title":"Find shortest path using Google services — route_google","text":"Find shortest path using Google's services. See mapsapi package details.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find shortest path using Google services — route_google","text":"","code":"route_google(from, to, mode = \"walking\", key = Sys.getenv(\"GOOGLE\"), ...)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find shortest path using Google services — route_google","text":"object representing origins (lines provided first argument, assigned l) object representing destinations mode Mode transport, walking (default), bicycling, transit, driving key Google key. default Sys.getenv(\"GOOGLE\"). Set : usethis::edit_r_environ(). ... Arguments passed routing function","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_google.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find shortest path using Google services — route_google","text":"","code":"if (FALSE) { from <- \"university of leeds\" to <- \"pedallers arms leeds\" r <- route(from, to, route_fun = cyclestreets::journey) plot(r) # r_google <- route(from, to, route_fun = mapsapi::mp_directions) # fails r_google1 <- route_google(from, to) plot(r_google1) r_google <- route(from, to, route_fun = route_google) }"},{"path":"https://docs.ropensci.org/stplanr/reference/route_nearest_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Find nearest route to a given point — route_nearest_point","title":"Find nearest route to a given point — route_nearest_point","text":"function written drop-replacement sf::st_nearest_feature(), works recent versions GEOS.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_nearest_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find nearest route to a given point — route_nearest_point","text":"","code":"route_nearest_point(r, p, id_out = FALSE)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_nearest_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find nearest route to a given point — route_nearest_point","text":"r input route object nearest route found p point whose nearest route found id_out index matching feature returned? FALSE default","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_nearest_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find nearest route to a given point — route_nearest_point","text":"","code":"r <- routes_fast_sf[2:6, NULL] p <- sf::st_sfc(sf::st_point(c(-1.540, 53.826)), crs = sf::st_crs(r)) route_nearest_point(r, p, id_out = TRUE) #> L1  #>  1  r_nearest <- route_nearest_point(r, p) plot(r$geometry) plot(p, add = TRUE) plot(r_nearest, lwd = 5, add = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_network_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial lines dataset representing a route network — route_network_sf","title":"Spatial lines dataset representing a route network — route_network_sf","text":"flow commuters using different segments road network represented flowlines_sf() routes_fast_sf() datasets","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_network_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial lines dataset representing a route network — route_network_sf","text":"spatial lines dataset 80 rows 1 column","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_network_small.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial lines dataset representing a small route network — route_network_small","title":"Spatial lines dataset representing a small route network — route_network_small","text":"flow randomly selected vertices osm_net_example. See data-raw/route_network_small.R details.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_network_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial lines dataset representing a small route network — route_network_small","text":"spatial lines dataset one column: flow","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_osrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plan routes on the transport network using the OSRM server — route_osrm","title":"Plan routes on the transport network using the OSRM server — route_osrm","text":"function simplified (uses GeoJSON binary polyline format) slower R interface OSRM routing services compared excellent osrm::osrmRoute() function (can used via route()) function.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_osrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plan routes on the transport network using the OSRM server — route_osrm","text":"","code":"route_osrm(   from,   to,   osrm.server = \"https://routing.openstreetmap.de/\",   osrm.profile = \"foot\" )"},{"path":"https://docs.ropensci.org/stplanr/reference/route_osrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plan routes on the transport network using the OSRM server — route_osrm","text":"object representing origins (lines provided first argument, assigned l) object representing destinations osrm.server base URL routing server. getOption(\"osrm.server\") default. osrm.profile routing profile use, e.g. \"car\", \"bike\" \"foot\" (using routing.openstreetmap.de test server). getOption(\"osrm.profile\") default. profile routing profile use? One \"foot\" (default) \"bike\" \"car\" default open server.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_osrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plan routes on the transport network using the OSRM server — route_osrm","text":"","code":"# \\donttest{ # Examples no longer working due to API being down # l1 = od_data_lines[49, ] # l1m = od_coords(l1) # from = l1m[, 1:2] # to = l1m[, 3:4] # if(curl::has_internet()) { # r_foot = route_osrm(from, to) # r_bike = route_osrm(from, to, osrm.profile = \"bike\") # r_car = route_osrm(from, to, osrm.profile = \"car\") # plot(r_foot$geometry, lwd = 9, col = \"grey\") # plot(r_bike, col = \"blue\", add = TRUE) # plot(r_car, col = \"red\", add = TRUE) # } # }"},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_average.html","id":null,"dir":"Reference","previous_headings":"","what":"Return smoothed averages of vector — route_rolling_average","title":"Return smoothed averages of vector — route_rolling_average","text":"function calculates simple rolling mean base R. useful calculating route characteristics mean distances segments changes gradient.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_average.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return smoothed averages of vector — route_rolling_average","text":"","code":"route_rolling_average(x, n = 3)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_average.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return smoothed averages of vector — route_rolling_average","text":"x Numeric vector smooth n window size smoothing function. default, 3, take mean values , including value.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_average.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return smoothed averages of vector — route_rolling_average","text":"","code":"y <- od_data_routes$elevations[od_data_routes$route_number == 2] y #> [1] 112.5263 111.0000 106.5000  84.0000  96.6250 110.0000 107.1429 105.5556 route_rolling_average(y) #> [1]        NA 110.00877 100.50000  95.70833  96.87500 104.58929 107.56614 #> [8]        NA route_rolling_average(y, n = 1) #> [1] 112.5263 111.0000 106.5000  84.0000  96.6250 110.0000 107.1429 105.5556 route_rolling_average(y, n = 2) #> [1] 111.7632 108.7500  95.2500  90.3125 103.3125 108.5714 106.3492       NA route_rolling_average(y, n = 3) #> [1]        NA 110.00877 100.50000  95.70833  96.87500 104.58929 107.56614 #> [8]        NA"},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Return smoothed differences between vector values — route_rolling_diff","title":"Return smoothed differences between vector values — route_rolling_diff","text":"function calculates simple rolling mean base R. useful calculating route characteristics mean distances segments changes gradient.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return smoothed differences between vector values — route_rolling_diff","text":"","code":"route_rolling_diff(x, lag = 1, abs = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return smoothed differences between vector values — route_rolling_diff","text":"x Numeric vector smooth lag window size smoothing function. default, 3, take mean values , including value. abs absolute (always positive) change returned? True default","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return smoothed differences between vector values — route_rolling_diff","text":"","code":"r1 <- od_data_routes[od_data_routes$route_number == 2, ] y <- r1$elevations route_rolling_diff(y, lag = 1) #> [1]  1.526316  4.500000 22.500000 12.625000 13.375000  2.857143  1.587302 #> [8]        NA route_rolling_diff(y, lag = 2) #> [1]  6.026316 27.000000  9.875000 26.000000 10.517857  4.444444        NA #> [8]        NA r1$elevations_diff_1 <- route_rolling_diff(y, lag = 1) r1$elevations_diff_n <- route_rolling_diff(y, lag = 1, abs = FALSE) d <- cumsum(r1$distances) - r1$distances / 2 diff_above_mean <- r1$elevations_diff_1 + mean(y) diff_above_mean_n <- r1$elevations_diff_n + mean(y) plot(c(0, cumsum(r1$distances)), c(y, y[length(y)]), ylim = c(80, 130)) lines(c(0, cumsum(r1$distances)), c(y, y[length(y)])) points(d, diff_above_mean) points(d, diff_above_mean_n, col = \"blue\") abline(h = mean(y))"},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate rolling average gradient from elevation data at segment level — route_rolling_gradient","title":"Calculate rolling average gradient from elevation data at segment level — route_rolling_gradient","text":"Calculate rolling average gradient elevation data segment level","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate rolling average gradient from elevation data at segment level — route_rolling_gradient","text":"","code":"route_rolling_gradient(elevations, distances, lag = 1, n = 2, abs = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate rolling average gradient from elevation data at segment level — route_rolling_gradient","text":"elevations Elevations, e.g. provided cyclestreets package distances Distances, e.g. provided cyclestreets package lag window size smoothing function. default, 3, take mean values , including value. n window size smoothing function. default, 3, take mean values , including value. abs absolute (always positive) change returned? True default","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_rolling_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate rolling average gradient from elevation data at segment level — route_rolling_gradient","text":"","code":"r1 <- od_data_routes[od_data_routes$route_number == 2, ] y <- r1$elevations distances <- r1$distances route_rolling_gradient(y, distances) #> [1] 0.009112333 0.029220779 0.106132075 0.036435786 0.047012302 0.048840049 #> [7] 0.017539244          NA route_rolling_gradient(y, distances, abs = FALSE) #> [1] -0.009112333 -0.029220779 -0.106132075  0.036435786  0.047012302 #> [6] -0.048840049 -0.017539244           NA route_rolling_gradient(y, distances, n = 3) #> [1]         NA 0.02191558 0.14966741 0.03888604 0.05635534 0.01285072 0.02380952 #> [8]         NA route_rolling_gradient(y, distances, n = 4) #> [1]         NA 0.02371542 0.08991009 0.05085599 0.06604938 0.01523810         NA #> [8]         NA r1$elevations_diff_1 <- route_rolling_diff(y, lag = 1) r1$rolling_gradient <- route_rolling_gradient(y, distances, n = 2) r1$rolling_gradient3 <- route_rolling_gradient(y, distances, n = 3) r1$rolling_gradient4 <- route_rolling_gradient(y, distances, n = 4) d <- cumsum(r1$distances) - r1$distances / 2 diff_above_mean <- r1$elevations_diff_1 + mean(y) par(mfrow = c(2, 1)) plot(c(0, cumsum(r1$distances)), c(y, y[length(y)]), ylim = c(80, 130)) lines(c(0, cumsum(r1$distances)), c(y, y[length(y)])) points(d, diff_above_mean) abline(h = mean(y)) rg <- r1$rolling_gradient rg[is.na(rg)] <- 0 plot(c(0, d), c(0, rg), ylim = c(0, 0.2)) points(c(0, d), c(0, r1$rolling_gradient3), col = \"blue\") points(c(0, d), c(0, r1$rolling_gradient4), col = \"grey\")  par(mfrow = c(1, 1))"},{"path":"https://docs.ropensci.org/stplanr/reference/route_sequential_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the sequential distances between sequential coordinate pairs — route_sequential_dist","title":"Calculate the sequential distances between sequential coordinate pairs — route_sequential_dist","text":"Calculate sequential distances sequential coordinate pairs","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_sequential_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the sequential distances between sequential coordinate pairs — route_sequential_dist","text":"","code":"route_sequential_dist(m, lonlat = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_sequential_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the sequential distances between sequential coordinate pairs — route_sequential_dist","text":"m Matrix containing coordinates elevations lonlat coordinates lon/lat order? TRUE default","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_sequential_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the sequential distances between sequential coordinate pairs — route_sequential_dist","text":"","code":"x <- c(0, 2, 3, 4, 5, 9) y <- c(0, 0, 0, 0, 0, 1) m <- cbind(x, y) route_sequential_dist(m) #> Maximum distance is > 100km. The 'cheap' measure is inaccurate over such #> large distances, you'd likely be better using a different 'measure'. #> [1] 222257.4 111128.7 111128.7 111128.7 458196.5"},{"path":"https://docs.ropensci.org/stplanr/reference/route_slope_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the gradient of line segments from a matrix of coordinates — route_slope_matrix","title":"Calculate the gradient of line segments from a matrix of coordinates — route_slope_matrix","text":"Calculate gradient line segments matrix coordinates","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_slope_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the gradient of line segments from a matrix of coordinates — route_slope_matrix","text":"","code":"route_slope_matrix(m, e = m[, 3], lonlat = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_slope_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the gradient of line segments from a matrix of coordinates — route_slope_matrix","text":"m Matrix containing coordinates elevations e Elevations units x (assumed metres) lonlat coordinates lon/lat order? TRUE default","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_slope_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the gradient of line segments from a matrix of coordinates — route_slope_matrix","text":"","code":"x <- c(0, 2, 3, 4, 5, 9) y <- c(0, 0, 0, 0, 0, 9) z <- c(1, 2, 2, 4, 3, 1) / 10 m <- cbind(x, y, z) plot(x, z, ylim = c(-0.5, 0.5), type = \"l\") (gx <- route_slope_vector(x, z)) #> [1]  0.05  0.00  0.20 -0.10 -0.05 (gxy <- route_slope_matrix(m, lonlat = FALSE)) #> [1]  0.05000000  0.00000000  0.20000000 -0.10000000 -0.02030692 abline(h = 0, lty = 2) points(x[-length(x)], gx, col = \"red\") points(x[-length(x)], gxy, col = \"blue\") title(\"Distance (in x coordinates) elevation profile\",   sub = \"Points show calculated gradients of subsequent lines\" )"},{"path":"https://docs.ropensci.org/stplanr/reference/route_slope_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the gradient of line segments from distance and elevation vectors — route_slope_vector","title":"Calculate the gradient of line segments from distance and elevation vectors — route_slope_vector","text":"Calculate gradient line segments distance elevation vectors","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_slope_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the gradient of line segments from distance and elevation vectors — route_slope_vector","text":"","code":"route_slope_vector(x, e)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_slope_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the gradient of line segments from distance and elevation vectors — route_slope_vector","text":"x Vector locations e Elevations units x (assumed metres)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/route_slope_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the gradient of line segments from distance and elevation vectors — route_slope_vector","text":"","code":"x <- c(0, 2, 3, 4, 5, 9) e <- c(1, 2, 2, 4, 3, 1) / 10 route_slope_vector(x, e) #> [1]  0.05  0.00  0.20 -0.10 -0.05"},{"path":"https://docs.ropensci.org/stplanr/reference/route_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split route in two at point on or near network — route_split","title":"Split route in two at point on or near network — route_split","text":"Split route two point near network","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split route in two at point on or near network — route_split","text":"","code":"route_split(r, p)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split route in two at point on or near network — route_split","text":"r sf object one feature containing linestring geometry split p point represented sf object split route","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split route in two at point on or near network — route_split","text":"sf object 2 feature","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split route in two at point on or near network — route_split","text":"","code":"sample_routes <- routes_fast_sf[2:6, NULL] r <- sample_routes[2, ] p <- sf::st_sfc(sf::st_point(c(-1.540, 53.826)), crs = sf::st_crs(r)) plot(r$geometry, lwd = 9, col = \"grey\") plot(p, add = TRUE) r_split <- route_split(r, p) plot(r_split, col = c(\"red\", \"blue\"), add = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_split_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Split route based on the id or coordinates of one of its vertices — route_split_id","title":"Split route based on the id or coordinates of one of its vertices — route_split_id","text":"Split route based id coordinates one vertices","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_split_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split route based on the id or coordinates of one of its vertices — route_split_id","text":"","code":"route_split_id(r, id = NULL, p = NULL)"},{"path":"https://docs.ropensci.org/stplanr/reference/route_split_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split route based on the id or coordinates of one of its vertices — route_split_id","text":"r sf object one feature containing linestring geometry split id index point number split p point represented sf object split route","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/route_split_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split route based on the id or coordinates of one of its vertices — route_split_id","text":"","code":"sample_routes <- routes_fast_sf[2:6, 3] r <- sample_routes[2, ] id <- round(n_vertices(r) / 2) r_split <- route_split_id(r, id = id) plot(r$geometry, lwd = 9, col = \"grey\") plot(r_split, col = c(\"red\", \"blue\"), add = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/routes_fast_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial lines dataset of commuter flows on the travel network — routes_fast_sf","title":"Spatial lines dataset of commuter flows on the travel network — routes_fast_sf","text":"Simulated travel route allocated transport network representing 'fastest' cents_sf objects.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/routes_fast_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial lines dataset of commuter flows on the travel network — routes_fast_sf","text":"","code":"routes_fast_sf"},{"path":"https://docs.ropensci.org/stplanr/reference/routes_fast_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial lines dataset of commuter flows on the travel network — routes_fast_sf","text":"spatial lines dataset 42 rows 15 columns","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/routes_slow_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial lines dataset of commuter flows on the travel network — routes_slow_sf","title":"Spatial lines dataset of commuter flows on the travel network — routes_slow_sf","text":"Simulated travel route allocated transport network representing 'quietest' cents_sf.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/routes_slow_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial lines dataset of commuter flows on the travel network — routes_slow_sf","text":"spatial lines dataset 42 rows 15 columns","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/stplanr-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in stplanr — stplanr-deprecated","title":"Deprecated functions in stplanr — stplanr-deprecated","text":"functions depreciated removed:","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/stplanr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"stplanr: Sustainable Transport Planning with R — stplanr-package","title":"stplanr: Sustainable Transport Planning with R — stplanr-package","text":"stplanr package provides functions access analyse data transportation research, including origin-destination analysis, route allocation modelling travel patterns.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/stplanr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stplanr: Sustainable Transport Planning with R — stplanr-package","text":"Robin Lovelace rob00x@gmail.com","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/toptail_buff.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip the beginning and ends of sf LINESTRING objects — toptail_buff","title":"Clip the beginning and ends of sf LINESTRING objects — toptail_buff","text":"Takes lines removes start end point, distance determined nearest buff polygon border.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/toptail_buff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip the beginning and ends of sf LINESTRING objects — toptail_buff","text":"","code":"toptail_buff(l, buff, ...)"},{"path":"https://docs.ropensci.org/stplanr/reference/toptail_buff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip the beginning and ends of sf LINESTRING objects — toptail_buff","text":"l sf object representing lines buff sf object POLYGON geometry buffer linestring. ... Arguments passed sf::st_buffer()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/toptail_buff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip the beginning and ends of sf LINESTRING objects — toptail_buff","text":"","code":"l <- routes_fast_sf buff <- zones_sf r_toptail <- toptail_buff(l, buff) nrow(l) #> [1] 42 nrow(r_toptail) #> [1] 11 plot(zones_sf$geometry) plot(l$geometry, add = TRUE) plot(r_toptail$geometry, lwd = 5, add = TRUE)"},{"path":"https://docs.ropensci.org/stplanr/reference/zones_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial polygons of home locations for flow analysis. — zones_sf","title":"Spatial polygons of home locations for flow analysis. — zones_sf","text":"correspond cents_sf data.","code":""},{"path":"https://docs.ropensci.org/stplanr/reference/zones_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial polygons of home locations for flow analysis. — zones_sf","text":"geo_code. official code zone","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/reference/zones_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial polygons of home locations for flow analysis. — zones_sf","text":"","code":"library(sf) zones_sf #> Simple feature collection with 8 features and 4 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -1.568904 ymin: 53.79758 xmax: -1.499425 ymax: 53.83613 #> Geodetic CRS:  WGS 84 #>       geo_code geo_label geo_labelw  avslope                       geometry #> 654  E02002382 Leeds 053       <NA> 2.284782 POLYGON ((-1.513589 53.8157... #> 1466 E02002367 Leeds 038       <NA> 5.091685 POLYGON ((-1.553587 53.8308... #> 1803 E02002393 Leeds 064       <NA> 2.361707 POLYGON ((-1.530424 53.8109... #> 3093 E02002361 Leeds 032       <NA> 3.589363 POLYGON ((-1.533519 53.8338... #> 4500 E02002371 Leeds 042       <NA> 2.814496 POLYGON ((-1.545994 53.8249... #> 6251 E02002363 Leeds 034       <NA> 3.076791 POLYGON ((-1.54344 53.83331... #> 7422 E02002384 Leeds 055       <NA> 2.856563 POLYGON ((-1.546022 53.8170... #> 7750 E02002377 Leeds 048       <NA> 2.762529 POLYGON ((-1.515997 53.8217... plot(zones_sf)"},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-development-version","dir":"Changelog","previous_headings":"","what":"stplanr (development version)","title":"stplanr (development version)","text":"line_segment() becomes S3 generic now methods sf sfc class objects","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-112-2023-09","dir":"Changelog","previous_headings":"","what":"stplanr 1.1.2 (2023-09)","title":"stplanr 1.1.2 (2023-09)","text":"CRAN release: 2023-09-15 Export S3 methods","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-111-2023-09","dir":"Changelog","previous_headings":"","what":"stplanr 1.1.1 (2023-09)","title":"stplanr 1.1.1 (2023-09)","text":"Fixed URLs things CRAN","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-110-2023-09","dir":"Changelog","previous_headings":"","what":"stplanr 1.1.0 (2023-09)","title":"stplanr 1.1.0 (2023-09)","text":"New function rnet_merge() related changes, new contributor Zhao Wang line_segment() now vectorised (#518) Assorted fixes, see https://github.com/ropensci/stplanr/issues?q=%3Aissue+%3Aclosed details","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-102","dir":"Changelog","previous_headings":"","what":"stplanr 1.0.2","title":"stplanr 1.0.2","text":"CRAN release: 2022-11-08 Update docs, fix missing functions issue (#499)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-101","dir":"Changelog","previous_headings":"","what":"stplanr 1.0.1","title":"stplanr 1.0.1","text":"CRAN release: 2022-08-19 Fix breaking change dodgr (#494)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-100","dir":"Changelog","previous_headings":"","what":"stplanr 1.0.0","title":"stplanr 1.0.0","text":"CRAN release: 2022-06-10 Remove dependency sp, rgeos rgdal (#332) catchmentArea.R functionality linefuns.R Browse code base stplanr 0.8.5 : https://github.com/ropensci/stplanr/releases Removal ‘ABS’ reading functionality favour https://github.com/mattcowgill/readabs","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-090-may-2022","dir":"Changelog","previous_headings":"","what":"stplanr 0.9.0 (May 2022)","title":"stplanr 0.9.0 (May 2022)","text":"CRAN release: 2022-05-11 Message added loading package announcing planned changes: support sp objects associated packages dropped (#332) New function line_segment_sf() (#482) Various changes required CRAN (#486)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-087-february-2022","dir":"Changelog","previous_headings":"","what":"stplanr 0.8.7 (February 2022)","title":"stplanr 0.8.7 (February 2022)","text":"CRAN release: 2022-02-01 route() now runs batch routing input linestring opentripplanner installed (#459)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-086-november-2021","dir":"Changelog","previous_headings":"","what":"stplanr 0.8.6 (November 2021)","title":"stplanr 0.8.6 (November 2021)","text":"CRAN release: 2021-11-26 route() checks CRS gives appropriate warning projected package now Suggests igraph rather depending making easier install","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-085","dir":"Changelog","previous_headings":"","what":"stplanr 0.8.5","title":"stplanr 0.8.5","text":"CRAN release: 2021-11-01 longer Suggests stats19 package","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-084","dir":"Changelog","previous_headings":"","what":"stplanr 0.8.4","title":"stplanr 0.8.4","text":"CRAN release: 2021-10-12 longer Suggests bench package Tests pass internet unavailable (#469)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-083","dir":"Changelog","previous_headings":"","what":"stplanr 0.8.3","title":"stplanr 0.8.3","text":"CRAN release: 2021-07-22 Outputs line_via() now correct CRS calc_catchment() deprecated generate warnings Minor fixes improvements package’s documentation","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-082","dir":"Changelog","previous_headings":"","what":"stplanr 0.8.2","title":"stplanr 0.8.2","text":"CRAN release: 2021-04-06 Bug fixed related route() function: silently failed pbapply installed. package promoted Suggests Imports (#460)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-081","dir":"Changelog","previous_headings":"","what":"stplanr 0.8.1","title":"stplanr 0.8.1","text":"CRAN release: 2021-01-07 Thanks styler package, code stplanr now adheres consistent style (using arrow <- assignment despite maintainer’s default equals = assignment - many = introduced accidentally!) New function rnet_group() groups route network elements (#403) overline() now converts MULTILINESTRING geometries LINESTRINGS automatically Routing network using sum_network_routes() now returns linestring routes start end (.e. travel) (#444) Routing using route_local() fixed: l argument now works (#448) New route_osrm() function (#449) rnet_breakup_vertices() now way faster, thanks Andrea Gilardi others (#416) rnet_group() now generic function works sfNetwork objects (#455) route_osrm() provides easy access multi-modal routing (#449) Bug route() function’s calculation bbox attributes fixed (#452)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-080","dir":"Changelog","previous_headings":"","what":"stplanr 0.8.0","title":"stplanr 0.8.0","text":"CRAN release: 2020-10-28 New function line_breakup() breaks-lines (#434) Minor documentation fixes, including (#431)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-072","dir":"Changelog","previous_headings":"","what":"stplanr 0.7.2","title":"stplanr 0.7.2","text":"CRAN release: 2020-09-04 Support sf objects toptail_buff() Updated examples tests README enable tests pass legacy versions PROJ (#423) Reduce vulnerability upcoming upstream changes (#426)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-071","dir":"Changelog","previous_headings":"","what":"stplanr 0.7.1","title":"stplanr 0.7.1","text":"CRAN release: 2020-08-28 Tweaks documentation examples CRAN tests","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-070","dir":"Changelog","previous_headings":"","what":"stplanr 0.7.0","title":"stplanr 0.7.0","text":"CRAN release: 2020-08-27 Issue line2points() set-ups fixed (#418) Old mapshape(), line_match() gclip() functions deprecated, maintained alternatives can now found packages. sp objects updated latest version sp (#364) sf objects updated support recent CRS encoding (#393) Deprecated functions including od_aggregate(), onewayid(), gtfs2sldf(), od_radiation() removed","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-062","dir":"Changelog","previous_headings":"","what":"stplanr 0.6.2","title":"stplanr 0.6.2","text":"CRAN release: 2020-07-08","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-6-2","dir":"Changelog","previous_headings":"","what":"New features","title":"stplanr 0.6.2","text":"New interface Google Directions API via mapsapi package (#410) New quiet argument overline() makes less chatty","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-061","dir":"Changelog","previous_headings":"","what":"stplanr 0.6.1","title":"stplanr 0.6.1","text":"CRAN release: 2020-06-23","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-6-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.6.1","text":"route() failed data.table installed (#408)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-060","dir":"Changelog","previous_headings":"","what":"stplanr 0.6.0","title":"stplanr 0.6.0","text":"CRAN release: 2020-05-03","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.6.0","text":"Bug SpatialLinesNetwork() fixed thanks Andrea Gilardi (#394) Updated documentation finding shortest paths Check start end arguments short path calculations numeric dodgr removed Suggests ’s back CRAN (#398) Updates dplyr code prevent warnings using dev version (#395)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.6.0","text":"Improvements route() allowing save list raw outputs use data.table faster performance available route_rolling_gradient() calculates rolling gradient elevation distance data segment level route_rolling_average() calculates rolling average values route_rolling_diff() calculates rolling difference value next geo_toptail() function now sf implementation (#390) New cl argument route() parallel routing (#388) New updated datasets representing od_data_sample different ways: od_data_lines od_data_routes route_graphhopper() deprecated (#389) Old functions use legacy sp dplyr code, sp_aggregate od_aggregate, deprecated New work--progress route_slope*() functions","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-052","dir":"Changelog","previous_headings":"","what":"stplanr 0.5.2","title":"stplanr 0.5.2","text":"CRAN release: 2020-04-06","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.5.2","text":"Documentation fixes (#384) bug affecting route() function calls pbapply installed fixed (#386) oneway() deprecated favour faster easier--maintain function od_oneway() (also see -development od package) (#387) Various changes made accomodate dev version dplyr (#383)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-051","dir":"Changelog","previous_headings":"","what":"stplanr 0.5.1","title":"stplanr 0.5.1","text":"CRAN release: 2020-03-01 Changes compatibility R 4.0.0","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-050","dir":"Changelog","previous_headings":"","what":"stplanr 0.5.0","title":"stplanr 0.5.0","text":"CRAN release: 2020-01-26 route_graphhopper() now work local graphhopper instance. See https://github.com/ropensci/stplanr/pull/369 old line2route() function now works routing functions return sf objects new route() function now resilient, providing progress bar pbapply package installed, returning result even routes failed, telling routes failed package fewer dependencies, readr, openxlsx lubridate removed Deprecated function buff_geo() removed","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.5.0","text":"destination now works argument line2route() (#368) overline() now accepts sf objects regardless name geometry column line2points() now works sfc objects (#361)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-041","dir":"Changelog","previous_headings":"","what":"stplanr 0.4.1","title":"stplanr 0.4.1","text":"CRAN release: 2019-11-23","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-4-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.4.1","text":"Better error messages od2line() fails due non-matching ids Improved documentation od2line() vignette: https://docs.ropensci.org/stplanr/articles/stplanr-od.html#non-matching-ids","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-040","dir":"Changelog","previous_headings":"","what":"stplanr 0.4.0","title":"stplanr 0.4.0","text":"CRAN release: 2019-10-13","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.4.0","text":"family new functions, including route_split(), rnet_add_node() sln_add_node() adding new nodes routes, route networks sfNetwork objects, closing #342 Updated vignette route networks, solving #237, can found : https://docs.ropensci.org/stplanr/articles/stplanr-route-nets.html Fix line2points() line_to_points() function removed favour line2point(). New function sln_clean_graph() removes unconnected elements sfNetwork objects. Credit Andrea Gilardi. See (#344). New functions rnet_breakup_vertices() line2vertices() breaking linestrings representing route networks smaller segments, preparation routing. See (#282) (functions address) PR (#347) details.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.4.0","text":"Bugs route_dodgr() associated examples fixed (#348) Annoying message printed load removed (#355)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"other-0-4-0","dir":"Changelog","previous_headings":"","what":"OTHER","title":"stplanr 0.4.0","text":"Andrea Gilardi added author. Deprecated functions related road crash (STATS19) data removed","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-031","dir":"Changelog","previous_headings":"","what":"stplanr 0.3.1","title":"stplanr 0.3.1","text":"CRAN release: 2019-09-17 stplanr now logo! See #334 line_to_points() depreciated favour od2line(), latter function name consistent package’s functions line2pointsn() now works sf objects Documentation fixes - see #329","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"other-0-3-1","dir":"Changelog","previous_headings":"","what":"OTHER","title":"stplanr 0.3.1","text":"Various improvements made stplanr-od vignette, thanks Edward Leigh URLs updated link stplanr’s new, official website: https://docs.ropensci.org/stplanr/","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-030","dir":"Changelog","previous_headings":"","what":"stplanr 0.3.0","title":"stplanr 0.3.0","text":"CRAN release: 2019-07-30","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.3.0","text":"New functions od_to_odmatrix() odmatrix_to_od() convert matrix forms origin-destination data New function od_oneway() replaces onewayid(), works better twice fast New od_id*() functions provide range ways convert origin-destination pair IDs single ID. See Stackoverflow issue tracker New vignette stplanr-od provides detailed documentation package’s OD data handling capabilities","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-0210","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.10","title":"stplanr 0.2.10","text":"CRAN release: 2019-05-18 Fix documentation. See #311","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-029","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.9","title":"stplanr 0.2.9","text":"CRAN release: 2019-05-10","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-9","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.9","text":"New functions od_aggregate_from() od_aggregate_to() provide easy ways aggregate origin-destination pairs. See #303. Updated overline2() now faster better documented (#307) Updates route_dodgr() function, provides interface dodgr package, accepts wider range inputs Better website updated function list. See https://ropensci.github.io/stplanr/index.html sf method overline() updated calls much faster overline2() function Updated documentation route_local()","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-2-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.2.9","text":"Bug sum_network_routes() fixed. See #267","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-028","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.8","title":"stplanr 0.2.8","text":"CRAN release: 2019-03-22","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.8","text":"stplanr paper published! See : https://journal.r-project.org/archive/2018/RJ-2018-053/index.html STATS19 functions dl_stats19() depreciated. split-new package stats19 route_dodgr() now implemented new function overline2() added, thanks Malcolm Morgan. faster overline(). substantial refactoring operation begun. resulted fewer lines code od functions, new stplanr::od_coords2line() function, support sf route_dodgr() added new example dataset, osm_net_example, added local routing purposes. citation package added. Try citation(\"stplanr\") package shiny new website thanks @maelle: https://ropensci.github.io/stplanr/ package looses Imports dependency rgdal, demoted Suggests","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-2-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.2.8","text":"issue route_graphhopper() fixed, see https://github.com/ropensci/stplanr/pull/297","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-027","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.7","title":"stplanr 0.2.7","text":"CRAN release: 2019-01-07","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-7","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.7","text":"Various changes support dplyr [0.8.0]: https://github.com/ropensci/stplanr/pull/275","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-2-7","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.2.7","text":"Fixed #272 removing byvars argument overline preparation overdue overhaul overline function.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"other-0-2-7","dir":"Changelog","previous_headings":"","what":"OTHER","title":"stplanr 0.2.7","text":"longer suggests tmap reduce install times: install.packages() installs suggested packages default","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-026","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.6","title":"stplanr 0.2.6","text":"CRAN release: 2018-10-20","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.6","text":"New function route_local() New argument line2route(): time_sleep waits period route request","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-2-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.2.6","text":"Issue dl_stats19(), see #270 Make style consistent, see commit Various small fixes documentation style","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-025","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.5","title":"stplanr 0.2.5","text":"CRAN release: 2018-06-02","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.5","text":"New function line_via() identifying intermediary points transport network","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-2-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.2.5","text":"Bug associated SpatialLinesNetwork() fixed (see #249)","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-024","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.4","title":"stplanr 0.2.4","text":"CRAN release: 2018-05-19","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.4","text":"New function geo_length() returns numeric vector line lengths sp sf objects.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"documentation-0-2-4","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"stplanr 0.2.4","text":"?route_graphhopper longer mentions depreciated ‘bike2’ profile - see #246 ?route_osrm mentions public API routes cars - see #246 Updated introducing-stplanr vignette show new function make robust","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-023","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.3","title":"stplanr 0.2.3","text":"CRAN release: 2018-03-06","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.3","text":"stplanr now imports lwgeom, needed sf::st_length(), used SpatialLinesNetwork(). Plotting behaviour updated sfNetwork objects: now plots geometry default. Improved documentation SpatialLinesNetwork() plot() spatial networks.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-2-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.2.3","text":"Bug sum_network_routes() fixed (see #240).","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-022","dir":"Changelog","previous_headings":"","what":"stplanr 0.2.2","title":"stplanr 0.2.2","text":"CRAN release: 2017-12-19","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.2","text":"release sp demoted Depends Imports, meaning functions attached namespace (loaded) run library(stplanr), making less tied sp. continuation work support sf make easier package work alternative representations geographic data.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.2.2","text":"Bug geo_select_aeq.sf() fixed Jakub Nowosad pull #238 issue od_aggregate.sf() fixed making much faster","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.2.0","text":"largest release since package created, dozens changes support simple features - see https://github.com/ropensci/stplanr/pull/198 details. Support sf. package now support new spatial class system functions. New function geo_bb() supercedes bb2poly(). new function can return polygons, points matrix objects determined output argument. also allows bounding boxes extended metres, scaled x y dimensions. geo_code() now uses nominatim default find locations maps. New function od_coords() takes wide range input data types return consistent output representing OD data data frame origin destination coordinates. used behind scenes make functions modular.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"work-in-progress-0-2-0","dir":"Changelog","previous_headings":"","what":"WORK IN PROGRESS","title":"stplanr 0.2.0","text":"Plans next release New generic route() function routing. flexible user-friendly existing line2route() route_*() functions enhances. Updated function names make using stplanr easier intuitive.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-019","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.9","title":"stplanr 0.1.9","text":"CRAN release: 2017-07-12","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-1-9","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.1.9","text":"Dependency cull: removed dependencies foreach doParallel route_cyclestreet() now also called (correctly) route_cyclestreets() New geo_code() function replaces dependency RGoogleMaps","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-1-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.1.9","text":"See issues closed last release search term: https://github.com/ropensci/stplanr/issues?utf8=%E2%9C%93&q=%3Aissue%20closed%3A%3E2017-06-01%20 Bug google_dist() fixed Fixed fails due breaking changes dplyr","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-018","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.8","title":"stplanr 0.1.8","text":"CRAN release: 2017-06-02","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-1-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.1.8","text":"New argument combinations added sum_network_routes() runs quicker - see pull/177. New examples added sum_network_routes(), weightfield() find_network_nodes() - see e.g. example(sum_network_routes) details. New dataset l_poly added. stplanr now website! See ropensci.github.io/stplanr/.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-1-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.1.8","text":"Serious bug SpatialLinesNetwork() fixed. Depreciated _each() dplyr functions replaced equivalent _at _all functions.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-017","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.7","title":"stplanr 0.1.7","text":"CRAN release: 2016-12-23","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-1-7","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.1.7","text":"new vignette! See vignettes/stplanr-paper.Rmd vignette(\"stplanr-paper\") details. original introducing-stplanr vignette updated. now provides basic introduction people new R spatial transport data. line2route() refactored improve error detection allow n_processes arguments. Thanks @nikolai-b. See pull/151 details. line_match() function added, wrapper around rgeos::gDistance(), find similar routes. RCurl data.table dependencies removed leaflet demoted import suggest. reduce install times. New functions od_aggregate() sp_aggregate() added, enable OD data aggregated new geographic levels.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-1-7","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.1.7","text":"#141 fixed: viaroute() works . #153 fixed: bidirectional = TRUE returns different result line_bearing() now.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"future-plans-0-1-7","dir":"Changelog","previous_headings":"","what":"FUTURE PLANS","title":"stplanr 0.1.7","text":"new branch uses sf tested. may eventually transition using simple features classes instead sp classes.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-016","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.6","title":"stplanr 0.1.6","text":"CRAN release: 2016-11-11","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"new-features-0-1-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"stplanr 0.1.6","text":"onewayid() now generic function, meaning can handle spatial non-spatial data New arguments provided line2route() allow specify variables join-- also updated sensible defaults New function od_id_order() put origin-destination ids order, identify 2 way duplicates (split onewayid())","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"bug-fixes-0-1-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"stplanr 0.1.6","text":"See issue tracker Bug route_cyclestreet() leading change_elev av_incline wrong now fixed Bug making variable names spaces id columns failed - now fixed #138","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-0-1-6","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.5","title":"stplanr 0.1.6","text":"NEW FEATURES New argument destinations added od2line(). See example(od2line) example. New dataset destinations showing OD matrix destinations can converted spatial data New argument list_output allows route information saved list, allowing save_raw = TRUE (return Spatial object) passed route_ function. tmap dependency removed faster installs BUG FIXES Bug line2route() (#124) fixed Various improvements documentation","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-0-1-6-1","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.4","title":"stplanr 0.1.6","text":"NEW FEATURES New function reproject() simple wrapper around spTransform() uses crs_select_aeq() convert spatial object geographic (lat/lon) coordinates projected coordinates, units 1 m. useful various spatial operations, finding length area object. Implement gprojected(), function performing GIS operations temporary, projected, version spatial objects. Addition line_bearing() return bearing lines based start end points. Addition angle_diff() finding angular difference lines: roughly parallel perpendicular? BUG FIXES line2df() now works lines multiple vertices faster. Fixes examples used illustrate od_dist() works.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-0-1-6-2","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.3","title":"stplanr 0.1.6","text":"NEW FEATURES Update OSRM functions support API v5. New parameter byvars overline() function, allow disaggregation results grouping variable (see example(overline)). Faster implementation od2line(): od2line2(). Plan replace original issues found new implementation. New function od2odf() converts OD data dataframe origins destinations (feeds od2line2() also useful self-standing function). New argument new_proj buff_geo() allows results exported coordinate reference system (CRS). New function gprojected() generalises concept buff_geo(), building crs_select_aeq() allow GIS query conducted temporary projected version spatial objects geographical CRSs. New function od_dist() can quickly calculate Euclidean distances OD pairs without converting spatial objects. BUG FIXES Bug fix onewayid() captures lines. Various improvements documentation code.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-0-1-6-3","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.2","title":"stplanr 0.1.6","text":"NEW FEATURES Interface Google Distance Matrix API dist_google. New transport planning API added, route_transportapi_public (testing). Update line2route, allowing accept different routing funtions via new argument route_fun (testing - tested route_fun = route_cyclestreet). New functions creating origin-destination data frames (point2odf) SpatialLinesDataFrames (points2flow). Addition n_vertices is_linepoint identifying number vertices spatial objects whether ‘line’ really point. BUG FIXES line2route refactored, 10 fold speed increases large (1000+) batches lines.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-0-1-6-4","dir":"Changelog","previous_headings":"","what":"stplanr 0.1.0","title":"stplanr 0.1.6","text":"NEW FEATURES Addition new class definition SpatialLinesNetwork, methods plot summary functions calc_network_routes find_network_nodes allowing fast route calculations via igraph network analysis functions. Functions removing beginning end lines: toptail toptailgs. Helper functions buff_geo, crs_select_aeq line2points added. Functionality reading UK’s stats19 data: read_stats19_* functions download, unzip re-categorise data. read_table functions added reading Australian OD data. decode_gl added decode Google polylines functions querying reading data OSRM services. gtfs2sldf added import GTFS routes SpatialLinesDataFrames.","code":""},{"path":"https://docs.ropensci.org/stplanr/news/index.html","id":"stplanr-0-1-6-5","dir":"Changelog","previous_headings":"","what":"stplanr 0.0.2","title":"stplanr 0.1.6","text":"Published CRAN","code":""}]
